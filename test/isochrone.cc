#include <iostream>
#include <string>
#include <vector>

#include "baldr/graphreader.h"
#include "baldr/rapidjson_utils.h"
#include "loki/worker.h"
#include "thor/worker.h"

#include "gurka/gurka.h"
#include "test.h"

#include <boost/geometry.hpp>
#include <boost/geometry/geometries/point_xy.hpp>
#include <boost/geometry/geometries/polygon.hpp>

using point_type = boost::geometry::model::d2::point_xy<double>;
using polygon_type = boost::geometry::model::polygon<point_type>;
using boost::geometry::within;

using namespace valhalla;
using namespace valhalla::thor;
using namespace valhalla::sif;
using namespace valhalla::loki;
using namespace valhalla::baldr;
using namespace valhalla::midgard;
using namespace valhalla::tyr;

using rp = rapidjson::Pointer;

namespace {

const auto config = test::make_config("test/data/utrecht_tiles");

void check_coords(const rapidjson::Value& a, const rapidjson::Value& b) {
  EXPECT_NEAR(a.GetArray()[0].GetDouble(), b.GetArray()[0].GetDouble(), 0.00002);
  EXPECT_NEAR(a.GetArray()[1].GetDouble(), b.GetArray()[1].GetDouble(), 0.00002);
}

void try_isochrone(loki_worker_t& loki_worker,
                   thor_worker_t& thor_worker,
                   const std::string& test_request,
                   const std::string& expected_json) {
  // compute the isochrone
  Api request;
  ParseApi(test_request, Options::isochrone, request);
  loki_worker.isochrones(request);
  auto response_json = thor_worker.isochrones(request);
  loki_worker.cleanup();
  thor_worker.cleanup();

  // Parse isochrone json responses
  rapidjson::Document response, expected_response;
  response.Parse(response_json);
  expected_response.Parse(expected_json);

  // Same number of features
  auto feature_count = rp("/features").Get(expected_response)->GetArray().Size();
  ASSERT_EQ(rp("/features").Get(response)->GetArray().Size(), feature_count);

  // Check features are in the right order and look roughly the same
  for (size_t i = 0; i < feature_count; ++i) {
    // same metadata
    auto resp_prop = rp("/features/" + std::to_string(i) + "/properties").Get(response);
    auto expt_prop = rp("/features/" + std::to_string(i) + "/properties").Get(expected_response);
    EXPECT_TRUE((resp_prop && expt_prop) || (!resp_prop && !expt_prop));
    if (expt_prop) {
      ASSERT_EQ(resp_prop->GetObject(), expt_prop->GetObject());
    }

    // same geom type
    std::string resp_type =
        rp("/features/" + std::to_string(i) + "/geometry/type").Get(response)->GetString();
    std::string expt_type =
        rp("/features/" + std::to_string(i) + "/geometry/type").Get(expected_response)->GetString();
    ASSERT_EQ(resp_type, expt_type);

    // point is special
    if (expt_type == "Point") {
      check_coords(*rp("/features/" + std::to_string(i) + "/geometry/coordinates").Get(response),
                   *rp("/features/" + std::to_string(i) + "/geometry/coordinates")
                        .Get(expected_response));
    } // iteration required
    else {
      // same geom appx
      auto resp_geom = rp("/features/" + std::to_string(i) + "/geometry/coordinates" +
                          (resp_type == "Polygon" ? "/0" : ""))
                           .Get(response)
                           ->GetArray();
      auto expt_geom = rp("/features/" + std::to_string(i) + "/geometry/coordinates" +
                          (expt_type == "Polygon" ? "/0" : ""))
                           .Get(expected_response)
                           ->GetArray();
      ASSERT_EQ(resp_geom.Size(), expt_geom.Size());
      for (size_t j = 0; j < expt_geom.Size(); ++j) {
        auto rcoord = resp_geom[j].GetArray();
        auto ecoord = expt_geom[j].GetArray();
        check_coords(rcoord, ecoord);
      }
    }
  }
}

std::vector<PointLL> polygon_from_geojson(const std::string& geojson) {
  rapidjson::Document response;
  response.Parse(geojson);

  auto feature_count = rp("/features").Get(response)->GetArray().Size();
  for (size_t i = 0; i < feature_count; ++i) {
    std::string type =
        rp("/features/" + std::to_string(i) + "/geometry/type").Get(response)->GetString();

    if (type != "Point") {
      auto geom = rp("/features/" + std::to_string(i) + "/geometry/coordinates" +
                     (type == "Polygon" ? "/0" : ""))
                      .Get(response)
                      ->GetArray();
      std::vector<PointLL> res;
      res.reserve(geom.Size());
      for (size_t j = 0; j < geom.Size(); ++j) {
        auto coord = geom[j].GetArray();
        res.emplace_back(coord[0].GetDouble(), coord[1].GetDouble());
      }
      return res;
    }
  }
  return {};
}

TEST(Isochrones, Basic) {
  // Test setup
  loki_worker_t loki_worker(config);
  thor_worker_t thor_worker(config);
  GraphReader reader(config.get_child("mjolnir"));

  {
    const auto request =
        R"({"locations":[{"lat":52.078937,"lon":5.115321}],"costing":"auto","contours":[{"time":9}],"polygons":false,"generalize":55})";
    const auto expected =
        R"({"features":[{"properties":{"fill":"#bf4040","fillOpacity":0.33,"fill-opacity":0.33,"fillColor":"#bf4040","color":"#bf4040","contour":9,"opacity":0.33,"metric":"time"},"geometry":{"coordinates":[[5.040321,52.125973],[5.040249,52.125009],[5.039254,52.125004],[5.035884,52.121937],[5.034758,52.119500],[5.033321,52.118968],[5.026649,52.121265],[5.025321,52.123031],[5.023361,52.122977],[5.023263,52.123937],[5.023308,52.122924],[5.025194,52.122810],[5.025247,52.121863],[5.026321,52.120697],[5.031766,52.118382],[5.031800,52.117458],[5.029976,52.116937],[5.030221,52.114037],[5.029321,52.113584],[5.030321,52.113863],[5.030571,52.114687],[5.031410,52.114848],[5.031997,52.116261],[5.034321,52.116540],[5.044321,52.113086],[5.046656,52.111272],[5.049421,52.111037],[5.049845,52.106937],[5.053206,52.103822],[5.057942,52.103558],[5.058321,52.102772],[5.059618,52.102937],[5.059055,52.104203],[5.060634,52.103937],[5.060839,52.098937],[5.060321,52.098313],[5.059556,52.099172],[5.057209,52.098937],[5.059005,52.098621],[5.058996,52.097262],[5.057744,52.096937],[5.060271,52.094887],[5.062321,52.096482],[5.063768,52.093937],[5.063321,52.092392],[5.061321,52.093256],[5.058695,52.092937],[5.058017,52.090241],[5.054983,52.088275],[5.051321,52.088044],[5.048321,52.086875],[5.047321,52.087983],[5.046798,52.086460],[5.045321,52.085858],[5.048774,52.085390],[5.049321,52.083138],[5.049794,52.085464],[5.051766,52.085382],[5.052003,52.084255],[5.050909,52.083937],[5.054201,52.081937],[5.055321,52.082761],[5.071321,52.081586],[5.071556,52.076937],[5.069321,52.075623],[5.068321,52.076586],[5.061002,52.077256],[5.059287,52.073903],[5.060416,52.073842],[5.062321,52.076429],[5.063321,52.075391],[5.066321,52.075319],[5.067613,52.070937],[5.065321,52.069622],[5.060321,52.069593],[5.059321,52.070585],[5.054919,52.070937],[5.056810,52.072937],[5.057875,52.077383],[5.060329,52.078937],[5.059321,52.081147],[5.057797,52.078461],[5.054993,52.077937],[5.055996,52.077612],[5.055660,52.074598],[5.052834,52.074450],[5.053422,52.075937],[5.053321,52.077731],[5.053095,52.076163],[5.051420,52.075937],[5.052009,52.074937],[5.050321,52.072423],[5.049690,52.073937],[5.051236,52.075937],[5.050049,52.077665],[5.047707,52.078323],[5.047589,52.079669],[5.048656,52.079937],[5.048321,52.081425],[5.048144,52.080114],[5.047237,52.080021],[5.046865,52.078393],[5.043259,52.075937],[5.044454,52.074937],[5.043513,52.074745],[5.043598,52.072937],[5.042321,52.072015],[5.040321,52.073129],[5.035321,52.073258],[5.034141,52.077937],[5.029369,52.075937],[5.030321,52.074810],[5.028160,52.075776],[5.022061,52.075197],[5.021982,52.073598],[5.025321,52.073406],[5.026952,52.071568],[5.027082,52.069176],[5.025117,52.068937],[5.025209,52.067937],[5.027321,52.068758],[5.029839,52.071419],[5.033321,52.071573],[5.046321,52.069539],[5.049321,52.068236],[5.054321,52.068238],[5.056027,52.066937],[5.056321,52.065249],[5.059321,52.067220],[5.063321,52.066206],[5.064688,52.063304],[5.066321,52.061945],[5.067613,52.061937],[5.066349,52.061909],[5.066631,52.058937],[5.065639,52.057937],[5.067760,52.057376],[5.068003,52.054937],[5.068357,52.054901],[5.068843,52.056415],[5.069547,52.056711],[5.069968,52.058290],[5.073608,52.058224],[5.073321,52.057459],[5.071012,52.057246],[5.069750,52.051508],[5.066428,52.052044],[5.066186,52.051072],[5.072978,52.046594],[5.074321,52.047407],[5.075321,52.046378],[5.079321,52.046332],[5.081321,52.047249],[5.082321,52.046270],[5.084321,52.046225],[5.085321,52.047217],[5.089321,52.046308],[5.090321,52.047264],[5.091321,52.046313],[5.093321,52.046314],[5.092964,52.047937],[5.094321,52.048197],[5.098321,52.046251],[5.099146,52.049112],[5.101182,52.051076],[5.102321,52.050149],[5.104099,52.050159],[5.106321,52.050202],[5.107570,52.051186],[5.107870,52.048486],[5.111321,52.048213],[5.112321,52.046219],[5.113321,52.049186],[5.114608,52.048937],[5.113699,52.047937],[5.114893,52.046509],[5.118321,52.046164],[5.120321,52.049163],[5.123321,52.049175],[5.124321,52.048191],[5.125321,52.049185],[5.138321,52.049259],[5.139321,52.050268],[5.141321,52.050285],[5.142321,52.048257],[5.145071,52.052187],[5.146321,52.051295],[5.147321,52.052282],[5.153321,52.052242],[5.154321,52.051234],[5.155792,52.051466],[5.156139,52.054119],[5.159029,52.054937],[5.158321,52.055645],[5.155145,52.055761],[5.155079,52.057179],[5.157321,52.057316],[5.159927,52.058937],[5.157321,52.059556],[5.156321,52.058170],[5.152162,52.058778],[5.151097,52.060713],[5.151688,52.063937],[5.149182,52.063798],[5.149126,52.065937],[5.151199,52.068059],[5.152321,52.068117],[5.157321,52.064146],[5.159112,52.064937],[5.158932,52.066548],[5.155197,52.067813],[5.153958,52.069574],[5.152202,52.069818],[5.151959,52.070937],[5.161802,52.079456],[5.163070,52.087937],[5.161672,52.090937],[5.163074,52.091937],[5.159648,52.093264],[5.157771,52.098387],[5.153858,52.101474],[5.153648,52.102937],[5.161819,52.104937],[5.157321,52.105479],[5.156321,52.104496],[5.154033,52.104649],[5.148684,52.113299],[5.149527,52.117937],[5.148321,52.120051],[5.146534,52.120150],[5.146321,52.122251],[5.146123,52.120135],[5.144825,52.119937],[5.146186,52.119803],[5.146077,52.116937],[5.147974,52.113284],[5.147321,52.112489],[5.146321,52.113215],[5.145118,52.112937],[5.142321,52.110977],[5.143959,52.110575],[5.143963,52.108937],[5.142085,52.108173],[5.141321,52.106324],[5.140321,52.108764],[5.134321,52.106882],[5.133321,52.105352],[5.132854,52.106404],[5.134211,52.106937],[5.131321,52.107348],[5.129321,52.104532],[5.122321,52.105644],[5.121321,52.105183],[5.120646,52.106262],[5.115321,52.106504],[5.111629,52.105937],[5.111321,52.104524],[5.110046,52.107937],[5.109321,52.108407],[5.107983,52.107599],[5.107321,52.109954],[5.107091,52.109167],[5.105126,52.109132],[5.103321,52.106677],[5.101321,52.106736],[5.100321,52.107727],[5.097321,52.105768],[5.096747,52.106937],[5.098469,52.109085],[5.094321,52.107836],[5.092321,52.110126],[5.080321,52.112600],[5.079300,52.111937],[5.081321,52.107534],[5.084321,52.106528],[5.087321,52.107447],[5.089651,52.105607],[5.085321,52.103591],[5.084748,52.104364],[5.082847,52.104463],[5.082407,52.106023],[5.079528,52.105730],[5.078321,52.106797],[5.077321,52.106618],[5.077321,52.104433],[5.078321,52.104674],[5.078969,52.103937],[5.077558,52.102937],[5.080371,52.099937],[5.079321,52.099417],[5.078321,52.100645],[5.077321,52.098424],[5.076321,52.099157],[5.071321,52.098792],[5.070321,52.097363],[5.070074,52.098690],[5.062808,52.105424],[5.058244,52.107860],[5.055535,52.110937],[5.059321,52.112586],[5.062321,52.109844],[5.063233,52.110024],[5.062950,52.111937],[5.057778,52.115937],[5.058321,52.117587],[5.062826,52.117937],[5.062321,52.119025],[5.060321,52.120095],[5.057536,52.119937],[5.059016,52.119632],[5.058321,52.118287],[5.056980,52.119596],[5.055928,52.119544],[5.054321,52.118176],[5.047308,52.116950],[5.049367,52.114983],[5.055683,52.115299],[5.055625,52.113633],[5.053596,52.111662],[5.051321,52.111620],[5.045321,52.114652],[5.043321,52.114448],[5.040321,52.116399],[5.038321,52.116250],[5.035837,52.118453],[5.037321,52.121383],[5.038692,52.121308],[5.039321,52.119998],[5.041321,52.120520],[5.038528,52.122144],[5.038476,52.123782],[5.040367,52.124891],[5.040321,52.125973]],"type":"LineString"},"type":"Feature"}],"type":"FeatureCollection"})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }

  {
    const auto request =
        R"({"locations":[{"lat":52.078937,"lon":5.115321}],"costing":"bicycle","costing_options":{"bicycle":{"service_penalty":0}},"contours":[{"time":15}],"polygons":true,"denoise":0.2})";
    const auto expected =
        R"({"features":[{"properties":{"fill-opacity":0.33,"fill":"#bf4040","fillColor":"#bf4040","color":"#bf4040","fillOpacity":0.33,"opacity":0.33,"contour":15,"metric":"time"},"geometry":{"coordinates":[[[5.108321,52.106148],[5.105321,52.10625],[5.103219,52.105039],[5.101321,52.105134],[5.100321,52.10462],[5.098321,52.104963],[5.094653,52.103937],[5.094321,52.101661],[5.095783,52.101399],[5.098321,52.098531],[5.100321,52.098286],[5.101321,52.097283],[5.103321,52.097292],[5.103321,52.095801],[5.103029,52.096645],[5.102321,52.096791],[5.095321,52.096753],[5.094321,52.097731],[5.088082,52.097698],[5.087984,52.098274],[5.089505,52.098753],[5.089656,52.099602],[5.090758,52.099937],[5.089321,52.100512],[5.088321,52.100224],[5.087321,52.101708],[5.08573,52.100937],[5.085321,52.099837],[5.082552,52.098937],[5.085321,52.09857],[5.085729,52.097937],[5.085321,52.097547],[5.081321,52.097327],[5.079969,52.097937],[5.080199,52.096815],[5.08185,52.095937],[5.079321,52.095544],[5.078765,52.094937],[5.079911,52.093527],[5.081638,52.092937],[5.078916,52.092342],[5.078764,52.090937],[5.079917,52.088533],[5.081712,52.087937],[5.081321,52.087147],[5.080254,52.087004],[5.08004,52.083937],[5.081591,52.082207],[5.081661,52.079937],[5.080818,52.07944],[5.078731,52.079347],[5.077896,52.079512],[5.077321,52.080425],[5.076321,52.080581],[5.076165,52.079937],[5.077321,52.078611],[5.082321,52.078291],[5.082568,52.077184],[5.084321,52.075779],[5.084576,52.074682],[5.082885,52.073937],[5.084614,52.071644],[5.082187,52.071803],[5.081899,52.072515],[5.079135,52.074751],[5.078965,52.075293],[5.079751,52.075937],[5.078542,52.077158],[5.077321,52.077268],[5.075321,52.075447],[5.070758,52.074937],[5.071321,52.074578],[5.074321,52.07445],[5.074954,52.07357],[5.076549,52.073165],[5.076575,52.071683],[5.075321,52.07145],[5.074808,52.070937],[5.074994,52.06961],[5.075984,52.068937],[5.075914,52.06553],[5.081321,52.065241],[5.08407,52.062686],[5.086663,52.062279],[5.087321,52.061429],[5.089321,52.061093],[5.089444,52.06206],[5.088578,52.063194],[5.088887,52.064371],[5.090321,52.064512],[5.091321,52.063497],[5.092724,52.06334],[5.093321,52.062497],[5.094321,52.064097],[5.094649,52.063265],[5.09546,52.063076],[5.095733,52.062349],[5.100727,52.058343],[5.101298,52.056914],[5.102338,52.05692],[5.102894,52.057364],[5.104321,52.056186],[5.10638,52.055996],[5.105321,52.054503],[5.104321,52.054945],[5.103599,52.054659],[5.103433,52.053825],[5.102665,52.053593],[5.102435,52.052823],[5.100981,52.052277],[5.100321,52.051343],[5.096519,52.051135],[5.096321,52.051628],[5.096115,52.051143],[5.097017,52.050633],[5.102321,52.050477],[5.104321,52.048435],[5.104894,52.050364],[5.106321,52.050394],[5.107706,52.051322],[5.108321,52.050495],[5.111913,52.049529],[5.112321,52.049087],[5.11431,52.050937],[5.113321,52.051958],[5.112934,52.051324],[5.111029,52.051645],[5.112002,52.052937],[5.112126,52.055132],[5.114321,52.055681],[5.115482,52.056776],[5.121321,52.057218],[5.123321,52.059146],[5.125321,52.059215],[5.126321,52.058232],[5.127519,52.059135],[5.128185,52.056801],[5.131811,52.056427],[5.132321,52.056061],[5.136323,52.056935],[5.137321,52.057547],[5.139321,52.057085],[5.139895,52.058363],[5.141624,52.059634],[5.141735,52.060937],[5.142808,52.06145],[5.144321,52.063187],[5.150021,52.057637],[5.151782,52.057398],[5.152321,52.056021],[5.152321,52.058197],[5.150894,52.05851],[5.148036,52.061937],[5.148321,52.06253],[5.149574,52.062684],[5.148835,52.063937],[5.148886,52.066372],[5.151091,52.068167],[5.152321,52.068296],[5.153321,52.067337],[5.154655,52.067271],[5.156321,52.065622],[5.158078,52.065937],[5.156855,52.066471],[5.155643,52.068259],[5.154321,52.068486],[5.152914,52.069937],[5.153321,52.070437],[5.157335,52.070937],[5.152321,52.071514],[5.151321,52.070638],[5.149107,52.072937],[5.151774,52.073484],[5.152321,52.07534],[5.153321,52.073869],[5.153943,52.075315],[5.155626,52.075937],[5.15538,52.077996],[5.153321,52.076444],[5.151876,52.077937],[5.153321,52.079469],[5.154548,52.07971],[5.155321,52.080761],[5.15613,52.080937],[5.156321,52.083227],[5.155657,52.082601],[5.154034,52.082224],[5.153669,52.081589],[5.152321,52.081506],[5.151583,52.080675],[5.149878,52.08038],[5.149526,52.079732],[5.148963,52.079937],[5.149164,52.081094],[5.151126,52.083132],[5.153768,52.08349],[5.153716,52.085937],[5.154647,52.087611],[5.15563,52.087937],[5.154321,52.089447],[5.151321,52.08943],[5.150858,52.089937],[5.151321,52.090504],[5.154088,52.090937],[5.153601,52.091217],[5.153321,52.093413],[5.152232,52.094026],[5.150321,52.093097],[5.149321,52.093808],[5.148321,52.093005],[5.147924,52.09354],[5.148321,52.094324],[5.149321,52.094187],[5.149858,52.0954],[5.151321,52.095321],[5.151894,52.097364],[5.154121,52.097937],[5.153491,52.098107],[5.153321,52.098841],[5.152974,52.098284],[5.152321,52.09826],[5.150908,52.098524],[5.150321,52.099513],[5.147207,52.099051],[5.146821,52.098937],[5.148732,52.098348],[5.148625,52.097633],[5.145321,52.097622],[5.144793,52.097937],[5.146181,52.098937],[5.14573,52.099937],[5.146519,52.100937],[5.146321,52.101629],[5.145019,52.101239],[5.144912,52.099937],[5.144321,52.099476],[5.142828,52.100937],[5.143321,52.101667],[5.144485,52.101937],[5.142656,52.102937],[5.140321,52.102566],[5.140037,52.102221],[5.137321,52.102151],[5.136321,52.103072],[5.135894,52.102364],[5.134059,52.101937],[5.133781,52.099937],[5.134321,52.099377],[5.135597,52.099213],[5.135579,52.096937],[5.134662,52.096596],[5.134362,52.095896],[5.133518,52.095937],[5.132492,52.096108],[5.132153,52.096769],[5.130321,52.097087],[5.129321,52.098075],[5.127923,52.098539],[5.127004,52.09962],[5.124887,52.099371],[5.124317,52.098933],[5.124359,52.102937],[5.120321,52.103258],[5.119321,52.102698],[5.116321,52.105645],[5.115321,52.104355],[5.114321,52.104836],[5.112321,52.104914],[5.111321,52.104485],[5.110655,52.105271],[5.108321,52.106148]]],"type":"Polygon"},"type":"Feature"}],"type":"FeatureCollection"})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }

  {
    const auto request =
        R"({"locations":[{"lat":52.078937,"lon":5.115321}],"costing":"bicycle","costing_options":{"bicycle":{"service_penalty":0}},"contours":[{"time":15}],"show_locations":true})";
    const auto expected =
        R"({"features":[{"properties":{"fill-opacity":0.33,"fill":"#bf4040","fillColor":"#bf4040","color":"#bf4040","fillOpacity":0.33,"opacity":0.33,"contour":15,"metric":"time"},"geometry":{"coordinates":[[5.108321,52.106148],[5.105321,52.10625],[5.103219,52.105039],[5.101321,52.105134],[5.100321,52.10462],[5.098321,52.104963],[5.094653,52.103937],[5.094321,52.101661],[5.095783,52.101399],[5.098321,52.098531],[5.100321,52.098286],[5.101321,52.097283],[5.103321,52.097292],[5.103321,52.095801],[5.103029,52.096645],[5.102321,52.096791],[5.095321,52.096753],[5.094321,52.097731],[5.088082,52.097698],[5.087984,52.098274],[5.089505,52.098753],[5.089656,52.099602],[5.090758,52.099937],[5.089321,52.100512],[5.088321,52.100224],[5.087321,52.101708],[5.08573,52.100937],[5.085321,52.099837],[5.082552,52.098937],[5.085321,52.09857],[5.085729,52.097937],[5.085321,52.097547],[5.081321,52.097327],[5.079969,52.097937],[5.080199,52.096815],[5.08185,52.095937],[5.079321,52.095544],[5.078765,52.094937],[5.079911,52.093527],[5.081638,52.092937],[5.078916,52.092342],[5.078764,52.090937],[5.079917,52.088533],[5.081712,52.087937],[5.081321,52.087147],[5.080254,52.087004],[5.08004,52.083937],[5.081591,52.082207],[5.081661,52.079937],[5.080818,52.07944],[5.078731,52.079347],[5.077896,52.079512],[5.077321,52.080425],[5.076321,52.080581],[5.076165,52.079937],[5.077321,52.078611],[5.082321,52.078291],[5.082568,52.077184],[5.084321,52.075779],[5.084576,52.074682],[5.082885,52.073937],[5.084614,52.071644],[5.082187,52.071803],[5.081899,52.072515],[5.079135,52.074751],[5.078965,52.075293],[5.079751,52.075937],[5.078542,52.077158],[5.077321,52.077268],[5.075321,52.075447],[5.070758,52.074937],[5.071321,52.074578],[5.074321,52.07445],[5.074954,52.07357],[5.076549,52.073165],[5.076575,52.071683],[5.075321,52.07145],[5.074808,52.070937],[5.074994,52.06961],[5.075984,52.068937],[5.075914,52.06553],[5.081321,52.065241],[5.08407,52.062686],[5.086663,52.062279],[5.087321,52.061429],[5.089321,52.061093],[5.089444,52.06206],[5.088578,52.063194],[5.088887,52.064371],[5.090321,52.064512],[5.091321,52.063497],[5.092724,52.06334],[5.093321,52.062497],[5.094321,52.064097],[5.094649,52.063265],[5.09546,52.063076],[5.095733,52.062349],[5.100727,52.058343],[5.101298,52.056914],[5.102338,52.05692],[5.102894,52.057364],[5.104321,52.056186],[5.10638,52.055996],[5.105321,52.054503],[5.104321,52.054945],[5.103599,52.054659],[5.103433,52.053825],[5.102665,52.053593],[5.102435,52.052823],[5.100981,52.052277],[5.100321,52.051343],[5.096519,52.051135],[5.096321,52.051628],[5.096115,52.051143],[5.097017,52.050633],[5.102321,52.050477],[5.104321,52.048435],[5.104894,52.050364],[5.106321,52.050394],[5.107706,52.051322],[5.108321,52.050495],[5.111913,52.049529],[5.112321,52.049087],[5.11431,52.050937],[5.113321,52.051958],[5.112934,52.051324],[5.111029,52.051645],[5.112002,52.052937],[5.112126,52.055132],[5.114321,52.055681],[5.115482,52.056776],[5.121321,52.057218],[5.123321,52.059146],[5.125321,52.059215],[5.126321,52.058232],[5.127519,52.059135],[5.128185,52.056801],[5.131811,52.056427],[5.132321,52.056061],[5.136323,52.056935],[5.137321,52.057547],[5.139321,52.057085],[5.139895,52.058363],[5.141624,52.059634],[5.141735,52.060937],[5.142808,52.06145],[5.144321,52.063187],[5.150021,52.057637],[5.151782,52.057398],[5.152321,52.056021],[5.152321,52.058197],[5.150894,52.05851],[5.148036,52.061937],[5.148321,52.06253],[5.149574,52.062684],[5.148835,52.063937],[5.148886,52.066372],[5.151091,52.068167],[5.152321,52.068296],[5.153321,52.067337],[5.154655,52.067271],[5.156321,52.065622],[5.158078,52.065937],[5.156855,52.066471],[5.155643,52.068259],[5.154321,52.068486],[5.152914,52.069937],[5.153321,52.070437],[5.157335,52.070937],[5.152321,52.071514],[5.151321,52.070638],[5.149107,52.072937],[5.151774,52.073484],[5.152321,52.07534],[5.153321,52.073869],[5.153943,52.075315],[5.155626,52.075937],[5.15538,52.077996],[5.153321,52.076444],[5.151876,52.077937],[5.153321,52.079469],[5.154548,52.07971],[5.155321,52.080761],[5.15613,52.080937],[5.156321,52.083227],[5.155657,52.082601],[5.154034,52.082224],[5.153669,52.081589],[5.152321,52.081506],[5.151583,52.080675],[5.149878,52.08038],[5.149526,52.079732],[5.148963,52.079937],[5.149164,52.081094],[5.151126,52.083132],[5.153768,52.08349],[5.153716,52.085937],[5.154647,52.087611],[5.15563,52.087937],[5.154321,52.089447],[5.151321,52.08943],[5.150858,52.089937],[5.151321,52.090504],[5.154088,52.090937],[5.153601,52.091217],[5.153321,52.093413],[5.152232,52.094026],[5.150321,52.093097],[5.149321,52.093808],[5.148321,52.093005],[5.147924,52.09354],[5.148321,52.094324],[5.149321,52.094187],[5.149858,52.0954],[5.151321,52.095321],[5.151894,52.097364],[5.154121,52.097937],[5.153491,52.098107],[5.153321,52.098841],[5.152974,52.098284],[5.152321,52.09826],[5.150908,52.098524],[5.150321,52.099513],[5.147207,52.099051],[5.146821,52.098937],[5.148732,52.098348],[5.148625,52.097633],[5.145321,52.097622],[5.144793,52.097937],[5.146181,52.098937],[5.14573,52.099937],[5.146519,52.100937],[5.146321,52.101629],[5.145019,52.101239],[5.144912,52.099937],[5.144321,52.099476],[5.142828,52.100937],[5.143321,52.101667],[5.144485,52.101937],[5.142656,52.102937],[5.140321,52.102566],[5.140037,52.102221],[5.137321,52.102151],[5.136321,52.103072],[5.135894,52.102364],[5.134059,52.101937],[5.133781,52.099937],[5.134321,52.099377],[5.135597,52.099213],[5.135579,52.096937],[5.134662,52.096596],[5.134362,52.095896],[5.133518,52.095937],[5.132492,52.096108],[5.132153,52.096769],[5.130321,52.097087],[5.129321,52.098075],[5.127923,52.098539],[5.127004,52.09962],[5.124887,52.099371],[5.124317,52.098933],[5.124359,52.102937],[5.120321,52.103258],[5.119321,52.102698],[5.116321,52.105645],[5.115321,52.104355],[5.114321,52.104836],[5.112321,52.104914],[5.111321,52.104485],[5.110655,52.105271],[5.108321,52.106148]],"type":"LineString"},"type":"Feature"},{"geometry":{"coordinates":[[5.115328,52.078940]],"type":"MultiPoint"},"properties":{"location_index":0,"type":"snapped"},"type":"Feature"},{"geometry":{"coordinates":[5.115321,52.078937],"type":"Point"},"properties":{"location_index":0,"type":"input"},"type":"Feature"}],"type":"FeatureCollection"})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }
}

TEST(Isochrones, OriginEdge) {
  const std::string ascii_map = R"(
       a-b-c
     )";

  const gurka::ways ways = {
      {"abc", {{"highway", "primary"}}},
  };

  const auto layout = gurka::detail::map_to_coordinates(ascii_map, 2000);
  auto map = gurka::buildtiles(layout, ways, {}, {}, "test/data/isochrones/origin_edge");

  std::string geojson;
  auto result = gurka::do_action(valhalla::Options::isochrone, map, {"b"}, "pedestrian",
                                 {{"/contours/0/time", "10"}}, {}, &geojson);
  std::vector<PointLL> iso_polygon = polygon_from_geojson(geojson);

  auto WaypointToBoostPoint = [&](std::string waypoint) {
    auto point = map.nodes[waypoint];
    return point_type(point.x(), point.y());
  };
  polygon_type polygon;
  for (const auto& p : iso_polygon) {
    boost::geometry::append(polygon.outer(), point_type(p.x(), p.y()));
  }
  EXPECT_EQ(within(WaypointToBoostPoint("b"), polygon), true);
  EXPECT_EQ(within(WaypointToBoostPoint("a"), polygon), false);
  EXPECT_EQ(within(WaypointToBoostPoint("c"), polygon), false);
}

TEST(Isochrones, LongEdge) {
  const std::string ascii_map = R"(
          c----d
         /
      a-b--------------f
    )";

  const gurka::ways ways = {
      {"ab", {{"highway", "primary"}}},
      {"bc", {{"highway", "primary"}}},
      {"cd", {{"highway", "primary"}}},
      {"bf", {{"highway", "primary"}}},
  };

  const auto layout = gurka::detail::map_to_coordinates(ascii_map, 100);
  auto map = gurka::buildtiles(layout, ways, {}, {}, "test/data/isochrones/long_edge");

  std::string geojson;
  auto result = gurka::do_action(valhalla::Options::isochrone, map, {"a"}, "pedestrian",
                                 {{"/contours/0/time", "15"}}, {}, &geojson);
  std::vector<PointLL> iso_polygon = polygon_from_geojson(geojson);

  auto WaypointToBoostPoint = [&](std::string waypoint) {
    auto point = map.nodes[waypoint];
    return point_type(point.x(), point.y());
  };
  polygon_type polygon;
  for (const auto& p : iso_polygon) {
    boost::geometry::append(polygon.outer(), point_type(p.x(), p.y()));
  }
  EXPECT_EQ(within(WaypointToBoostPoint("a"), polygon), true);
  EXPECT_EQ(within(WaypointToBoostPoint("b"), polygon), true);
  EXPECT_EQ(within(WaypointToBoostPoint("c"), polygon), true);
  EXPECT_EQ(within(WaypointToBoostPoint("d"), polygon), true);
  EXPECT_EQ(within(WaypointToBoostPoint("f"), polygon), false);

  // check that b-f edges is visited and is partially within the isochrone
  auto interpolated = map.nodes["b"].PointAlongSegment(map.nodes["f"], 0.4);
  EXPECT_EQ(within(point_type(interpolated.x(), interpolated.y()), polygon), true);
}

} // namespace

int main(int argc, char* argv[]) {
  // user wants to try it
  if (argc > 1) {
    loki_worker_t loki_worker(config);
    thor_worker_t thor_worker(config);
    GraphReader reader(config.get_child("mjolnir"));
    Api request;
    ParseApi(argv[1], Options::isochrone, request);
    loki_worker.isochrones(request);
    std::cout << thor_worker.isochrones(request) << std::endl;
    return EXIT_SUCCESS;
  }
  // Silence logs (especially long request logging)
  logging::Configure({{"type", ""}});
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
