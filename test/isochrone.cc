#include <iostream>
#include <string>
#include <vector>

#include "baldr/graphreader.h"
#include "baldr/rapidjson_utils.h"
#include "loki/worker.h"
#include "thor/worker.h"

#include "test.h"

using namespace valhalla;
using namespace valhalla::thor;
using namespace valhalla::sif;
using namespace valhalla::loki;
using namespace valhalla::baldr;
using namespace valhalla::midgard;
using namespace valhalla::tyr;

using rp = rapidjson::Pointer;

namespace {

const auto config = test::make_config("test/data/utrecht_tiles");

void check_coords(const rapidjson::Value& a, const rapidjson::Value& b) {
  EXPECT_NEAR(a.GetArray()[0].GetDouble(), b.GetArray()[0].GetDouble(), 0.00002);
  EXPECT_NEAR(a.GetArray()[1].GetDouble(), b.GetArray()[1].GetDouble(), 0.00002);
}

void try_isochrone(loki_worker_t& loki_worker,
                   thor_worker_t& thor_worker,
                   const std::string& test_request,
                   const std::string& expected_json) {
  // compute the isochrone
  Api request;
  ParseApi(test_request, Options::isochrone, request);
  loki_worker.isochrones(request);
  auto response_json = thor_worker.isochrones(request);

  // Parse isochrone json responses
  rapidjson::Document response, expected_response;
  response.Parse(response_json);
  expected_response.Parse(expected_json);

  // Same number of features
  auto feature_count = rp("/features").Get(expected_response)->GetArray().Size();
  ASSERT_EQ(rp("/features").Get(response)->GetArray().Size(), feature_count);

  // Check features are in the right order and look roughly the same
  for (size_t i = 0; i < feature_count; ++i) {
    // same metadata
    auto resp_prop = rp("/features/" + std::to_string(i) + "/properties").Get(response);
    auto expt_prop = rp("/features/" + std::to_string(i) + "/properties").Get(expected_response);
    EXPECT_TRUE((resp_prop && expt_prop) || (!resp_prop && !expt_prop));
    if (expt_prop) {
      ASSERT_EQ(resp_prop->GetObject(), expt_prop->GetObject());
    }

    // same geom type
    std::string resp_type =
        rp("/features/" + std::to_string(i) + "/geometry/type").Get(response)->GetString();
    std::string expt_type =
        rp("/features/" + std::to_string(i) + "/geometry/type").Get(expected_response)->GetString();
    ASSERT_EQ(resp_type, expt_type);

    // point is special
    if (expt_type == "Point") {
      check_coords(*rp("/features/" + std::to_string(i) + "/geometry/coordinates").Get(response),
                   *rp("/features/" + std::to_string(i) + "/geometry/coordinates")
                        .Get(expected_response));
    } // iteration required
    else {
      // same geom appx
      auto resp_geom = rp("/features/" + std::to_string(i) + "/geometry/coordinates" +
                          (resp_type == "Polygon" ? "/0" : ""))
                           .Get(response)
                           ->GetArray();
      auto expt_geom = rp("/features/" + std::to_string(i) + "/geometry/coordinates" +
                          (expt_type == "Polygon" ? "/0" : ""))
                           .Get(expected_response)
                           ->GetArray();
      ASSERT_EQ(resp_geom.Size(), expt_geom.Size());
      for (size_t j = 0; j < expt_geom.Size(); ++j) {
        auto rcoord = resp_geom[j].GetArray();
        auto ecoord = expt_geom[j].GetArray();
        check_coords(rcoord, ecoord);
      }
    }
  }

  loki_worker.cleanup();
  thor_worker.cleanup();
}

TEST(Isochrones, Basic) {
  // Test setup
  loki_worker_t loki_worker(config);
  thor_worker_t thor_worker(config);
  GraphReader reader(config.get_child("mjolnir"));

  {
    const auto expected =
        R"({"features":[{"properties":{"fill":"#bf4040","fillOpacity":0.33,"fill-opacity":0.33,"fillColor":"#bf4040","color":"#bf4040","contour":9,"opacity":0.33,"metric":"time"},"geometry":{"coordinates":[[5.040321,52.125973],[5.038528,52.122144],[5.041321,52.120520],[5.039321,52.119998],[5.037321,52.121383],[5.035837,52.118453],[5.038321,52.116250],[5.051321,52.111620],[5.053596,52.111662],[5.055683,52.115299],[5.049367,52.114983],[5.047308,52.116950],[5.055928,52.119544],[5.058321,52.118287],[5.057536,52.119937],[5.062321,52.119025],[5.062826,52.117937],[5.058321,52.117587],[5.057778,52.115937],[5.063233,52.110024],[5.059321,52.112586],[5.055535,52.110937],[5.070321,52.097363],[5.071321,52.098792],[5.077321,52.098424],[5.078321,52.100645],[5.080371,52.099937],[5.077558,52.102937],[5.078969,52.103937],[5.077321,52.106618],[5.082407,52.106023],[5.085321,52.103591],[5.089651,52.105607],[5.087321,52.107447],[5.084321,52.106528],[5.081321,52.107534],[5.080321,52.112600],[5.092321,52.110126],[5.094321,52.107836],[5.098469,52.109085],[5.097321,52.105768],[5.100321,52.107727],[5.103321,52.106677],[5.107321,52.109954],[5.111321,52.104524],[5.111629,52.105937],[5.115321,52.106504],[5.129321,52.104532],[5.131321,52.107348],[5.134211,52.106937],[5.133321,52.105352],[5.140321,52.108764],[5.141321,52.106324],[5.143963,52.108937],[5.142321,52.110977],[5.147974,52.113284],[5.144825,52.119937],[5.146321,52.122251],[5.149527,52.117937],[5.148684,52.113299],[5.154033,52.104649],[5.161819,52.104937],[5.153648,52.102937],[5.159648,52.093264],[5.163074,52.091937],[5.161802,52.079456],[5.151959,52.070937],[5.158932,52.066548],[5.159112,52.064937],[5.156739,52.064355],[5.152321,52.068117],[5.149126,52.065937],[5.149182,52.063798],[5.151701,52.063937],[5.153088,52.057704],[5.157321,52.059556],[5.159927,52.058937],[5.155079,52.057179],[5.155145,52.055761],[5.159029,52.054937],[5.156139,52.054119],[5.155792,52.051466],[5.145071,52.052187],[5.142321,52.048257],[5.141321,52.050285],[5.124321,52.048191],[5.120321,52.049163],[5.118321,52.046164],[5.114893,52.046509],[5.113321,52.049186],[5.112321,52.046219],[5.111321,52.048213],[5.107870,52.048486],[5.107570,52.051186],[5.104099,52.050159],[5.101182,52.051076],[5.098321,52.046251],[5.094321,52.048197],[5.093321,52.046314],[5.090321,52.047264],[5.089321,52.046308],[5.072978,52.046594],[5.066186,52.051072],[5.066428,52.052044],[5.069750,52.051508],[5.071012,52.057246],[5.073608,52.058224],[5.069968,52.058290],[5.068003,52.054937],[5.067760,52.057376],[5.065639,52.057937],[5.067613,52.061937],[5.064688,52.063304],[5.063321,52.066206],[5.059321,52.067220],[5.056321,52.065249],[5.054321,52.068238],[5.033321,52.071573],[5.029839,52.071419],[5.025209,52.067937],[5.026952,52.071568],[5.025321,52.073406],[5.021982,52.073598],[5.022061,52.075197],[5.030321,52.074810],[5.029369,52.075937],[5.034141,52.077937],[5.035321,52.073258],[5.042321,52.072015],[5.043259,52.075937],[5.048321,52.081425],[5.047707,52.078323],[5.051236,52.075937],[5.050321,52.072423],[5.053321,52.077731],[5.052834,52.074450],[5.055660,52.074598],[5.054993,52.077937],[5.057797,52.078461],[5.059321,52.081147],[5.060329,52.078937],[5.054919,52.070937],[5.060321,52.069593],[5.067613,52.070937],[5.066321,52.075319],[5.062321,52.076429],[5.059287,52.073903],[5.061002,52.077256],[5.069321,52.075623],[5.071556,52.076937],[5.071321,52.081586],[5.054201,52.081937],[5.050909,52.083937],[5.051766,52.085382],[5.049794,52.085464],[5.049321,52.083138],[5.048774,52.085390],[5.045321,52.085858],[5.047321,52.087983],[5.048321,52.086875],[5.054986,52.088272],[5.058695,52.092937],[5.063321,52.092392],[5.063768,52.093937],[5.062321,52.096482],[5.060271,52.094887],[5.057744,52.096937],[5.059005,52.098621],[5.057209,52.098937],[5.060839,52.098937],[5.060634,52.103937],[5.058321,52.102772],[5.053206,52.103822],[5.049845,52.106937],[5.049421,52.111037],[5.034321,52.116532],[5.029321,52.113584],[5.031766,52.118382],[5.026321,52.120692],[5.023263,52.123937],[5.033321,52.118968],[5.040321,52.125973]],"type":"LineString"},"type":"Feature"}],"type":"FeatureCollection"})";
    const auto request =
        R"({"locations":[{"lat":52.078937,"lon":5.115321}],"costing":"auto","contours":[{"time":9}],"polygons":false,"denoise":0.2,"generalize":100})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }

  {
    const auto expected =
        R"({"features":[{"properties":{"fill":"#bf4040","fillOpacity":0.33,"fill-opacity":0.33,"fillColor":"#bf4040","color":"#bf4040","contour":15,"opacity":0.33,"metric":"time"},"geometry":{"coordinates":[[[5.116640,52.105256],[5.116321,52.105645],[5.115321,52.104355],[5.114321,52.104836],[5.112321,52.104914],[5.111321,52.104359],[5.110500,52.105116],[5.109321,52.105300],[5.108855,52.104937],[5.109960,52.103937],[5.108321,52.102578],[5.107913,52.104529],[5.106321,52.105415],[5.104321,52.104936],[5.101321,52.105134],[5.100321,52.104620],[5.098321,52.104963],[5.094653,52.103937],[5.094321,52.101661],[5.095783,52.101399],[5.098321,52.098531],[5.100321,52.098286],[5.101321,52.097283],[5.103321,52.097292],[5.103321,52.095801],[5.103029,52.096645],[5.102321,52.096791],[5.095321,52.096753],[5.094321,52.097731],[5.088082,52.097698],[5.087984,52.098274],[5.089505,52.098753],[5.089656,52.099602],[5.090758,52.099937],[5.089321,52.100512],[5.088321,52.100224],[5.087321,52.101708],[5.085730,52.100937],[5.085321,52.099837],[5.082552,52.098937],[5.085321,52.098570],[5.085729,52.097937],[5.085321,52.097547],[5.081321,52.097327],[5.079969,52.097937],[5.080199,52.096815],[5.081850,52.095937],[5.079321,52.095544],[5.078765,52.094937],[5.079911,52.093527],[5.081638,52.092937],[5.078916,52.092342],[5.078764,52.090937],[5.079917,52.088533],[5.081712,52.087937],[5.081321,52.087147],[5.080254,52.087004],[5.080040,52.083937],[5.081591,52.082207],[5.081661,52.079937],[5.080818,52.079440],[5.078731,52.079347],[5.077896,52.079512],[5.077321,52.080425],[5.076321,52.080581],[5.076165,52.079937],[5.077321,52.078611],[5.082321,52.078291],[5.082568,52.077184],[5.084321,52.075779],[5.084576,52.074682],[5.082885,52.073937],[5.084615,52.071643],[5.082187,52.071803],[5.081899,52.072515],[5.079135,52.074751],[5.078965,52.075293],[5.079751,52.075937],[5.078542,52.077158],[5.077321,52.077268],[5.075321,52.075447],[5.070758,52.074937],[5.071321,52.074578],[5.074321,52.074450],[5.074954,52.073570],[5.076549,52.073165],[5.076575,52.071683],[5.075321,52.071450],[5.074808,52.070937],[5.074994,52.069610],[5.075984,52.068937],[5.075914,52.065530],[5.081321,52.065241],[5.084070,52.062686],[5.086663,52.062279],[5.087321,52.061429],[5.089321,52.061093],[5.089618,52.061937],[5.088737,52.062937],[5.089075,52.064183],[5.090574,52.064190],[5.090922,52.063538],[5.092646,52.063262],[5.093321,52.062497],[5.094321,52.064097],[5.094649,52.063265],[5.095460,52.063076],[5.095733,52.062349],[5.100727,52.058343],[5.101298,52.056914],[5.102338,52.056920],[5.102894,52.057364],[5.104321,52.056186],[5.106467,52.056083],[5.105989,52.054937],[5.105321,52.054503],[5.104285,52.054937],[5.103555,52.053703],[5.100936,52.052322],[5.100321,52.051446],[5.096519,52.051135],[5.096321,52.051627],[5.096115,52.051143],[5.097017,52.050633],[5.102321,52.050477],[5.104321,52.048435],[5.104321,52.050805],[5.103625,52.051937],[5.104061,52.052197],[5.105321,52.051267],[5.107706,52.051322],[5.108321,52.050495],[5.111761,52.050377],[5.112321,52.049087],[5.114310,52.050937],[5.113321,52.051958],[5.112934,52.051324],[5.111029,52.051645],[5.112002,52.052937],[5.112126,52.055132],[5.113820,52.055438],[5.115321,52.056658],[5.121321,52.057218],[5.123321,52.059146],[5.125321,52.059215],[5.126321,52.058232],[5.127519,52.059135],[5.128185,52.056801],[5.131811,52.056427],[5.132321,52.056061],[5.136323,52.056935],[5.137321,52.057547],[5.139321,52.057085],[5.139895,52.058363],[5.141624,52.059634],[5.141735,52.060937],[5.142808,52.061450],[5.144321,52.063187],[5.150021,52.057637],[5.151782,52.057398],[5.152321,52.056021],[5.152494,52.058110],[5.150894,52.058510],[5.148036,52.061937],[5.148321,52.062530],[5.149571,52.062687],[5.148835,52.063937],[5.148964,52.065937],[5.151091,52.068167],[5.152321,52.068296],[5.153321,52.067337],[5.154655,52.067271],[5.156321,52.065622],[5.158078,52.065937],[5.156855,52.066471],[5.155643,52.068259],[5.154321,52.068486],[5.152914,52.069937],[5.153321,52.070437],[5.155321,52.070591],[5.155552,52.071168],[5.152321,52.071514],[5.151321,52.070638],[5.149107,52.072937],[5.150064,52.073937],[5.150119,52.075139],[5.151321,52.076331],[5.152990,52.074937],[5.153321,52.073869],[5.153943,52.075315],[5.155525,52.075733],[5.155380,52.077996],[5.153321,52.076444],[5.151876,52.077937],[5.153321,52.079469],[5.154548,52.079710],[5.155321,52.080761],[5.156130,52.080937],[5.156459,52.083075],[5.154034,52.082224],[5.153669,52.081589],[5.152321,52.081506],[5.151583,52.080675],[5.150321,52.080602],[5.149321,52.079666],[5.149099,52.080937],[5.150074,52.081937],[5.149321,52.082690],[5.147798,52.082460],[5.146440,52.080818],[5.145146,52.080937],[5.145213,52.082045],[5.145975,52.082283],[5.147321,52.084141],[5.149321,52.084198],[5.150321,52.083224],[5.153321,52.083302],[5.154078,52.083937],[5.153716,52.085937],[5.154647,52.087611],[5.155630,52.087937],[5.154321,52.089447],[5.150321,52.089457],[5.149645,52.086937],[5.149321,52.086662],[5.149098,52.086937],[5.149094,52.091164],[5.152321,52.091434],[5.153321,52.090809],[5.154088,52.090937],[5.153601,52.091217],[5.153553,52.093169],[5.152191,52.094067],[5.150321,52.092542],[5.149321,52.093400],[5.148321,52.092600],[5.147336,52.092937],[5.147977,52.094281],[5.149521,52.094737],[5.150321,52.095545],[5.151321,52.095321],[5.151894,52.097364],[5.154121,52.097937],[5.153491,52.098107],[5.153321,52.098841],[5.152974,52.098284],[5.152321,52.098260],[5.150908,52.098524],[5.150321,52.099513],[5.147207,52.099051],[5.146821,52.098937],[5.148732,52.098348],[5.148625,52.097633],[5.145321,52.097622],[5.144793,52.097937],[5.146181,52.098937],[5.145730,52.099937],[5.146519,52.100937],[5.146321,52.101629],[5.145019,52.101239],[5.144912,52.099937],[5.144321,52.099476],[5.142828,52.100937],[5.143321,52.101667],[5.144485,52.101937],[5.142656,52.102937],[5.140321,52.102566],[5.140037,52.102221],[5.137321,52.102151],[5.136321,52.103072],[5.135894,52.102364],[5.134155,52.102103],[5.133781,52.099937],[5.134321,52.099377],[5.135597,52.099213],[5.135579,52.096937],[5.134662,52.096596],[5.134321,52.095880],[5.132492,52.096108],[5.132153,52.096769],[5.130321,52.097087],[5.129321,52.098075],[5.127811,52.098427],[5.127004,52.099620],[5.124887,52.099371],[5.124317,52.098933],[5.124359,52.102937],[5.120321,52.103257],[5.119321,52.102698],[5.116640,52.105256]]],"type":"Polygon"},"type":"Feature"}],"type":"FeatureCollection"})";
    const auto request =
        R"({"locations":[{"lat":52.078937,"lon":5.115321}],"costing":"bicycle","costing_options":{"bicycle":{"service_penalty":0}},"contours":[{"time":15}],"polygons":true,"denoise":0.2})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }

  {
    const auto expected =
        R"({"features":[{"properties":{"fill":"#bf4040","fillOpacity":0.33,"fill-opacity":0.33,"fillColor":"#bf4040","color":"#bf4040","contour":15,"opacity":0.33,"metric":"time"},"geometry":{"coordinates":[[5.116640,52.105256],[5.116321,52.105645],[5.115321,52.104355],[5.114321,52.104836],[5.112321,52.104914],[5.111321,52.104359],[5.110500,52.105116],[5.109321,52.105300],[5.108855,52.104937],[5.109960,52.103937],[5.108321,52.102578],[5.107913,52.104529],[5.106321,52.105415],[5.104321,52.104936],[5.101321,52.105134],[5.100321,52.104620],[5.098321,52.104963],[5.094653,52.103937],[5.094321,52.101661],[5.095783,52.101399],[5.098321,52.098531],[5.100321,52.098286],[5.101321,52.097283],[5.103321,52.097292],[5.103321,52.095801],[5.103029,52.096645],[5.102321,52.096791],[5.095321,52.096753],[5.094321,52.097731],[5.088082,52.097698],[5.087984,52.098274],[5.089505,52.098753],[5.089656,52.099602],[5.090758,52.099937],[5.089321,52.100512],[5.088321,52.100224],[5.087321,52.101708],[5.085730,52.100937],[5.085321,52.099837],[5.082552,52.098937],[5.085321,52.098570],[5.085729,52.097937],[5.085321,52.097547],[5.081321,52.097327],[5.079969,52.097937],[5.080199,52.096815],[5.081850,52.095937],[5.079321,52.095544],[5.078765,52.094937],[5.079911,52.093527],[5.081638,52.092937],[5.078916,52.092342],[5.078764,52.090937],[5.079917,52.088533],[5.081712,52.087937],[5.081321,52.087147],[5.080254,52.087004],[5.080040,52.083937],[5.081591,52.082207],[5.081661,52.079937],[5.080818,52.079440],[5.078731,52.079347],[5.077896,52.079512],[5.077321,52.080425],[5.076321,52.080581],[5.076165,52.079937],[5.077321,52.078611],[5.082321,52.078291],[5.082568,52.077184],[5.084321,52.075779],[5.084576,52.074682],[5.082885,52.073937],[5.084615,52.071643],[5.082187,52.071803],[5.081899,52.072515],[5.079135,52.074751],[5.078965,52.075293],[5.079751,52.075937],[5.078542,52.077158],[5.077321,52.077268],[5.075321,52.075447],[5.070758,52.074937],[5.071321,52.074578],[5.074321,52.074450],[5.074954,52.073570],[5.076549,52.073165],[5.076575,52.071683],[5.075321,52.071450],[5.074808,52.070937],[5.074994,52.069610],[5.075984,52.068937],[5.075914,52.065530],[5.081321,52.065241],[5.084070,52.062686],[5.086663,52.062279],[5.087321,52.061429],[5.089321,52.061093],[5.089618,52.061937],[5.088737,52.062937],[5.089075,52.064183],[5.090574,52.064190],[5.090922,52.063538],[5.092646,52.063262],[5.093321,52.062497],[5.094321,52.064097],[5.094649,52.063265],[5.095460,52.063076],[5.095733,52.062349],[5.100727,52.058343],[5.101298,52.056914],[5.102338,52.056920],[5.102894,52.057364],[5.104321,52.056186],[5.106467,52.056083],[5.105989,52.054937],[5.105321,52.054503],[5.104285,52.054937],[5.103555,52.053703],[5.100936,52.052322],[5.100321,52.051446],[5.096519,52.051135],[5.096321,52.051627],[5.096115,52.051143],[5.097017,52.050633],[5.102321,52.050477],[5.104321,52.048435],[5.104321,52.050805],[5.103625,52.051937],[5.104061,52.052197],[5.105321,52.051267],[5.107706,52.051322],[5.108321,52.050495],[5.111761,52.050377],[5.112321,52.049087],[5.114310,52.050937],[5.113321,52.051958],[5.112934,52.051324],[5.111029,52.051645],[5.112002,52.052937],[5.112126,52.055132],[5.113820,52.055438],[5.115321,52.056658],[5.121321,52.057218],[5.123321,52.059146],[5.125321,52.059215],[5.126321,52.058232],[5.127519,52.059135],[5.128185,52.056801],[5.131811,52.056427],[5.132321,52.056061],[5.136323,52.056935],[5.137321,52.057547],[5.139321,52.057085],[5.139895,52.058363],[5.141624,52.059634],[5.141735,52.060937],[5.142808,52.061450],[5.144321,52.063187],[5.150021,52.057637],[5.151782,52.057398],[5.152321,52.056021],[5.152494,52.058110],[5.150894,52.058510],[5.148036,52.061937],[5.148321,52.062530],[5.149571,52.062687],[5.148835,52.063937],[5.148964,52.065937],[5.151091,52.068167],[5.152321,52.068296],[5.153321,52.067337],[5.154655,52.067271],[5.156321,52.065622],[5.158078,52.065937],[5.156855,52.066471],[5.155643,52.068259],[5.154321,52.068486],[5.152914,52.069937],[5.153321,52.070437],[5.155321,52.070591],[5.155552,52.071168],[5.152321,52.071514],[5.151321,52.070638],[5.149107,52.072937],[5.150064,52.073937],[5.150119,52.075139],[5.151321,52.076331],[5.152990,52.074937],[5.153321,52.073869],[5.153943,52.075315],[5.155525,52.075733],[5.155380,52.077996],[5.153321,52.076444],[5.151876,52.077937],[5.153321,52.079469],[5.154548,52.079710],[5.155321,52.080761],[5.156130,52.080937],[5.156459,52.083075],[5.154034,52.082224],[5.153669,52.081589],[5.152321,52.081506],[5.151583,52.080675],[5.150321,52.080602],[5.149321,52.079666],[5.149099,52.080937],[5.150074,52.081937],[5.149321,52.082690],[5.147798,52.082460],[5.146440,52.080818],[5.145146,52.080937],[5.145213,52.082045],[5.145975,52.082283],[5.147321,52.084141],[5.149321,52.084198],[5.150321,52.083224],[5.153321,52.083302],[5.154078,52.083937],[5.153716,52.085937],[5.154647,52.087611],[5.155630,52.087937],[5.154321,52.089447],[5.150321,52.089457],[5.149645,52.086937],[5.149321,52.086662],[5.149098,52.086937],[5.149094,52.091164],[5.152321,52.091434],[5.153321,52.090809],[5.154088,52.090937],[5.153601,52.091217],[5.153553,52.093169],[5.152191,52.094067],[5.150321,52.092542],[5.149321,52.093400],[5.148321,52.092600],[5.147336,52.092937],[5.147977,52.094281],[5.149521,52.094737],[5.150321,52.095545],[5.151321,52.095321],[5.151894,52.097364],[5.154121,52.097937],[5.153491,52.098107],[5.153321,52.098841],[5.152974,52.098284],[5.152321,52.098260],[5.150908,52.098524],[5.150321,52.099513],[5.147207,52.099051],[5.146821,52.098937],[5.148732,52.098348],[5.148625,52.097633],[5.145321,52.097622],[5.144793,52.097937],[5.146181,52.098937],[5.145730,52.099937],[5.146519,52.100937],[5.146321,52.101629],[5.145019,52.101239],[5.144912,52.099937],[5.144321,52.099476],[5.142828,52.100937],[5.143321,52.101667],[5.144485,52.101937],[5.142656,52.102937],[5.140321,52.102566],[5.140037,52.102221],[5.137321,52.102151],[5.136321,52.103072],[5.135894,52.102364],[5.134155,52.102103],[5.133781,52.099937],[5.134321,52.099377],[5.135597,52.099213],[5.135579,52.096937],[5.134662,52.096596],[5.134321,52.095880],[5.132492,52.096108],[5.132153,52.096769],[5.130321,52.097087],[5.129321,52.098075],[5.127811,52.098427],[5.127004,52.099620],[5.124887,52.099371],[5.124317,52.098933],[5.124359,52.102937],[5.120321,52.103257],[5.119321,52.102698],[5.116640,52.105256]],"type":"LineString"},"type":"Feature"},{"geometry":{"coordinates":[[5.115328,52.078940]],"type":"MultiPoint"},"properties":{"location_index":0,"type":"snapped"},"type":"Feature"},{"geometry":{"coordinates":[5.115321,52.078937],"type":"Point"},"properties":{"location_index":0,"type":"input"},"type":"Feature"}],"type":"FeatureCollection"})";
    const auto request =
        R"({"locations":[{"lat":52.078937,"lon":5.115321}],"costing":"bicycle","costing_options":{"bicycle":{"service_penalty":0}},"contours":[{"time":15}],"show_locations":true})";
    try_isochrone(loki_worker, thor_worker, request, expected);
  }
}

} // namespace

int main(int argc, char* argv[]) {
  // user wants to try it
  if (argc > 1) {
    loki_worker_t loki_worker(config);
    thor_worker_t thor_worker(config);
    GraphReader reader(config.get_child("mjolnir"));
    Api request;
    ParseApi(argv[1], Options::isochrone, request);
    loki_worker.isochrones(request);
    std::cout << thor_worker.isochrones(request) << std::endl;
    return EXIT_SUCCESS;
  }
  // Silence logs (especially long request logging)
  logging::Configure({{"type", ""}});
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
