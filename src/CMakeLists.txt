include(GNUInstallDirs)

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

## Declare C++ build configuration variables as part of HandleLibcxxFlags.
#
# - LIBCXX_COMPILE_FLAGS: flags used to compile libc++
# - LIBCXX_LINK_FLAGS: flags used to link libc++
# - LIBCXX_LIBRARIES: libraries to link libc++ to
set(LIBCXX_COMPILE_FLAGS "")
set(LIBCXX_LINK_FLAGS "")
set(LIBCXX_LIBRARIES "")

# Inlclude build macros for updating configuration variables
include(HandleLibcxxFlags)

## Define libvalhalla sub-modules as OBJECT libraries

# TODO: Remove workaround after switching to CMake 3.11
# with fixed  https://gitlab.kitware.com/cmake/cmake/issues/14778
# and merged https://gitlab.kitware.com/cmake/cmake/merge_requests/1524
# Check the commit message for the fix patch that removes cache internal variables
# and adds target_link_libraries(${library} ${MODULE_DEPENDS}) again
set(libvalhalla_compile_definitions "" CACHE INTERNAL "")
set(libvalhalla_compile_options "" CACHE INTERNAL "")
set(libvalhalla_include_directories "" CACHE INTERNAL "")
set(libvalhalla_link_objects "" CACHE INTERNAL  "")
set(libvalhalla_link_libraries "" CACHE INTERNAL  "")

# Setup warning flags. Note that these are only added to libvalhalla_compile_options if
# ENABLE_COMPILER_WARNINGS=ON. Note that this needs to be done before the definition of
# valhalla_module, otherwise LIBCXX_COMPILE_FLAGS will not available for downstream targets.

if (ENABLE_COMPILER_WARNINGS)
  message(STATUS "Enabling compiler warning flags")
endif()

function (cxx_add_warning_flags target)
  target_add_compile_flags_if_supported(${target} PRIVATE -Wall -Wextra)
  if (ENABLE_WERROR)
   target_add_compile_flags_if_supported(${target} PRIVATE -Werror)
  endif()
endfunction()

function(valhalla_module)
  set(oneValueArgs NAME)
  set(multiValueArgs SOURCES HEADERS DEPENDS BUILD_DEPENDS INCLUDE_DIRECTORIES)
  cmake_parse_arguments(MODULE "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  set(library valhalla-${MODULE_NAME})
  add_library(${library} OBJECT ${MODULE_SOURCES} ${MODULE_HEADERS})
  add_library(valhalla::${MODULE_NAME} ALIAS ${library})
  set_target_properties(${library} PROPERTIES FOLDER "Modules")

  # Generate source groups so the files are properly sorted in IDEs like Xcode.
  create_source_groups("Header Files" ${MODULE_HEADERS})
  create_source_groups("Source Files" ${MODULE_SOURCES})

  target_compile_definitions(${library}
    PUBLIC
      $<$<BOOL:${MSVC}>:VC_EXTRALEAN;WIN32_LEAN_AND_MEAN;NOMINMAX;NOGDI>
      RAPIDJSON_HAS_STDSTRING
      HAS_REMOTE_API=0
      AUTO_DOWNLOAD=0
    PRIVATE
      $<$<BOOL:${LOGGING_LEVEL}>:LOGGING_LEVEL_${LOGGING_LEVEL}>)
  target_include_directories(${library} ${MODULE_INCLUDE_DIRECTORIES}
     PRIVATE
       ${valhalla_SOURCE_DIR}/src
       ${valhalla_BINARY_DIR}/src
       ${valhalla_SOURCE_DIR}/valhalla
       ${valhalla_BINARY_DIR}/src/valhalla)

  if(ENABLE_COVERAGE)
    target_compile_options(${library} PUBLIC -ftest-coverage -fprofile-arcs)
  endif()

  if(ENABLE_COMPILER_WARNINGS)
    cxx_add_warning_flags(${library})
  endif()

  install(FILES ${MODULE_HEADERS}
    DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/valhalla/${MODULE_NAME}"
    COMPONENT development)

  if(BUILD_SHARED_LIBS OR ENABLE_PYTHON_BINDINGS)
    set_property(TARGET ${library} PROPERTY POSITION_INDEPENDENT_CODE ON)
  endif()

  ## Save properties of external dependencies and target objects to propagate to valhalla target
  string(REGEX REPLACE "(valhalla::[^;]+)" ""
    external_module_depends "${MODULE_DEPENDS}")
  string(REGEX REPLACE "(valhalla::[^;]+)" ""
    external_module_build_depends "${MODULE_BUILD_DEPENDS}")
  string(REGEX REPLACE
    "([^;]+)" "$<TARGET_PROPERTY:\\1,INTERFACE_COMPILE_DEFINITIONS>"
    external_compile_definitions
    "${external_module_depends};${external_module_build_depends}")
  string(REGEX REPLACE
    "([^;]+)" "$<TARGET_PROPERTY:\\1,INTERFACE_INCLUDE_DIRECTORIES>"
    external_include_directories
    "${external_module_depends};${external_module_build_depends}")
  target_compile_definitions(${library} PRIVATE ${external_compile_definitions})
  target_include_directories(${library} PRIVATE ${external_include_directories})
  foreach(dep IN LISTS MODULE_DEPENDS MODULE_BUILD_DEPENDS)
    if("${dep}" MATCHES "^valhalla::")
      add_dependencies(${library} ${dep})
    endif()
  endforeach()

  set(libvalhalla_compile_definitions "${libvalhalla_compile_definitions};$<TARGET_PROPERTY:${library},COMPILE_DEFINITIONS>" CACHE INTERNAL "")
  set(libvalhalla_compile_options "${libvalhalla_compile_options};$<TARGET_PROPERTY:${library},COMPILE_OPTIONS>" CACHE INTERNAL "")
  set(libvalhalla_include_directories "${libvalhalla_include_directories};$<TARGET_PROPERTY:${library},INCLUDE_DIRECTORIES>" CACHE INTERNAL "")
  set(libvalhalla_link_objects "${libvalhalla_link_objects};$<TARGET_OBJECTS:${library}>" CACHE INTERNAL "")
  set(libvalhalla_link_libraries "${libvalhalla_link_libraries};${external_module_depends}" CACHE INTERNAL "")
endfunction()

add_subdirectory(${valhalla_SOURCE_DIR}/third_party/robin-hood-hashing ${CMAKE_BINARY_DIR}/third_party/robin-hood-hashing)

add_subdirectory(../proto ${CMAKE_CURRENT_BINARY_DIR}/valhalla/proto)
add_subdirectory(baldr)
add_subdirectory(loki)
add_subdirectory(meili)
add_subdirectory(midgard)
add_subdirectory(odin)
add_subdirectory(sif)
add_subdirectory(skadi)
add_subdirectory(thor)
add_subdirectory(tyr)
if(ENABLE_DATA_TOOLS)
  add_subdirectory(mjolnir)
endif()

## libvalhalla
configure_file(../valhalla/valhalla.h.in ${CMAKE_CURRENT_BINARY_DIR}/valhalla/valhalla.h @ONLY)
configure_file(../valhalla/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/valhalla/config.h @ONLY)

set(valhalla_hdrs
    ${CMAKE_CURRENT_BINARY_DIR}/valhalla/valhalla.h
    ${valhalla_SOURCE_DIR}/valhalla/worker.h
    ${valhalla_SOURCE_DIR}/valhalla/filesystem.h)

set(valhalla_src
    worker.cc
    filesystem.cc
    ${CMAKE_CURRENT_BINARY_DIR}/valhalla/config.h
    ${valhalla_hdrs}
    ${libvalhalla_link_objects})

if (ENABLE_SERVICES)
  set(valhalla_hdrs ${valhalla_hdrs} ${valhalla_SOURCE_DIR}/valhalla/tile_server.h)
  set(valhalla_src ${valhalla_src} tile_server.cc)
endif()

add_library(valhalla ${valhalla_src})
set_target_properties(valhalla PROPERTIES FOLDER "Library")
create_source_groups("Source Files" ${valhalla_src})

target_compile_definitions(valhalla
  PUBLIC
    RAPIDJSON_HAS_STDSTRING  # this is a part of the workaround for OBJECT libraries,
                             # because ${libvalhalla_compile_definitions} must be private.
                             # To be removed with ${libvalhalla_compile_definitions} below
    HAS_REMOTE_API=0
    AUTO_DOWNLOAD=0
  PRIVATE
    ${libvalhalla_compile_definitions})

if(MSVC)
  target_compile_definitions(valhalla
    PUBLIC VC_EXTRALEAN WIN32_LEAN_AND_MEAN NOMINMAX NOGDI)
endif()

target_compile_options(valhalla PRIVATE ${libvalhalla_compile_options})

if(ENABLE_COMPILER_WARNINGS)
  cxx_add_warning_flags(valhalla)
endif()

target_include_directories(valhalla
  PUBLIC
    $<BUILD_INTERFACE:${valhalla_SOURCE_DIR}>
    $<BUILD_INTERFACE:${valhalla_BINARY_DIR}/src>
    $<BUILD_INTERFACE:${valhalla_SOURCE_DIR}/third_party/rapidjson/include>
    $<BUILD_INTERFACE:${valhalla_SOURCE_DIR}/third_party/date/include>
    $<INSTALL_INTERFACE:include>
  PRIVATE
    ${valhalla_SOURCE_DIR}/valhalla
    ${valhalla_BINARY_DIR}/src/valhalla
    ${libvalhalla_include_directories})

if(MSVC)
  target_include_directories(valhalla
    PUBLIC ${valhalla_SOURCE_DIR}/third_party/dirent/include)
endif()

target_link_libraries(valhalla
  PUBLIC
    ${valhalla_protobuf_targets}
  PRIVATE
    ${libvalhalla_link_libraries}
    $<$<BOOL:${ENABLE_COVERAGE}>:gcov>
    Threads::Threads)
if(ENABLE_HTTP OR ENABLE_DATA_TOOLS)
  target_link_libraries(valhalla PUBLIC CURL::libcurl)
endif()
set(VALHALLA_EXPORT_LIBRARIES valhalla)

if(ENABLE_DATA_TOOLS)
  add_library(valhalla-data-tools INTERFACE)
  target_link_libraries(valhalla-data-tools
    INTERFACE
      SQLite::SQLite3
      SpatiaLite::SpatiaLite)
  list(APPEND VALHALLA_EXPORT_LIBRARIES valhalla-data-tools)
endif()

set_target_properties(valhalla PROPERTIES
  VERSION "${VALHALLA_VERSION}"
  SOVERSION "${VALHALLA_VERSION_MAJOR}")

set(LIBVALHALLA_SO_LINK ${CMAKE_SHARED_LIBRARY_PREFIX}valhalla${CMAKE_SHARED_LIBRARY_SUFFIX})

install(TARGETS ${VALHALLA_EXPORT_LIBRARIES}
  EXPORT valhalla_exports
  LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT shared NAMELINK_SKIP
  ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT development)

if(BUILD_SHARED_LIBS)
  install(FILES ${valhalla_SOURCE_DIR}/COPYING ${valhalla_SOURCE_DIR}/CHANGELOG.md
    DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/doc/libvalhalla0"
    COMPONENT shared)
else()
  if(UNIX)
    add_custom_target(${LIBVALHALLA_SO_LINK} ALL
      COMMAND ${CMAKE_COMMAND} -E create_symlink "${LIBVALHALLA_SO_LINK}.${VALHALLA_VERSION_MAJOR}" ${LIBVALHALLA_SO_LINK})
    set_target_properties(${LIBVALHALLA_SO_LINK} PROPERTIES FOLDER "Library")
  endif()
endif()

install(FILES ${valhalla_SOURCE_DIR}/COPYING ${valhalla_SOURCE_DIR}/CHANGELOG.md ${valhalla_SOURCE_DIR}/README.md
  DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/doc/libvalhalla-dev"
  COMPONENT development)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${LIBVALHALLA_SO_LINK}
  DESTINATION "${CMAKE_INSTALL_LIBDIR}"
  COMPONENT development)

install(FILES ${valhalla_hdrs}
  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/valhalla"
  COMPONENT development)

configure_file(
  "${valhalla_SOURCE_DIR}/cmake/valhalla-config.cmake.in"
  "${valhalla_BINARY_DIR}/valhalla-config.cmake"
  @ONLY)

export(TARGETS ${VALHALLA_EXPORT_LIBRARIES} NAMESPACE valhalla::
  FILE "${valhalla_BINARY_DIR}/valhalla-targets.cmake")

install(FILES "${valhalla_BINARY_DIR}/valhalla-config.cmake"
  DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/valhalla"
  COMPONENT development)

install(EXPORT valhalla_exports
  NAMESPACE valhalla::
  DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/valhalla"
  FILE valhalla-targets.cmake
  COMPONENT development)

if(PKG_CONFIG_FOUND)
  ## Configure libvalhalla.pc file with valhalla target linking options via PkgConfig linker
  set(CMAKE_PkgConfig_LINK_EXECUTABLE "<CMAKE_COMMAND> -DINPUT=${valhalla_SOURCE_DIR}/libvalhalla.pc.in -DOUTPUT=<TARGET> -DVERSION=${VALHALLA_VERSION} -Dprefix=${CMAKE_INSTALL_PREFIX} -Dexec_prefix=${CMAKE_INSTALL_PREFIX} -Dlibdir=${CMAKE_INSTALL_LIBDIR} -Dincludedir=${CMAKE_INSTALL_INCLUDEDIR} -Ddeplibs=\"<FLAGS> <LINK_FLAGS> <LINK_LIBRARIES>\" -P ${CMAKE_SOURCE_DIR}/cmake/PkgConfig.cmake")

  add_executable(libvalhalla.pc EXCLUDE_FROM_ALL ../libvalhalla.pc.in)
  target_link_libraries(libvalhalla.pc valhalla)
  set_target_properties(libvalhalla.pc PROPERTIES LINKER_LANGUAGE PkgConfig)
  set_target_properties(libvalhalla.pc PROPERTIES FOLDER "Library")
  install(CODE "execute_process(COMMAND ${CMAKE_COMMAND} --build . --target libvalhalla.pc OUTPUT_QUIET ERROR_VARIABLE _err RESULT_VARIABLE _res)
  if(NOT \${_res} EQUAL 0)
    message(FATAL_ERROR \"Configuring libvalhalla.pc failed: \${_err}\")
  endif()")
  install(FILES ${valhalla_BINARY_DIR}/src/libvalhalla.pc
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig"
    COMPONENT development)
endif()
