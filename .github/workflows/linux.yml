name: Build Linux

on:
  # We run this once a week so we regularly publish pyvalhalla-weekly
  # but not on _every_ master commit
  schedule:
    - cron: "0 0 * * 0"
  push:
    paths-ignore:
      - "*.md"
      - .circleci/
      - docs/
      - run_route_scripts/
      - test_requests/
      - "**vcpkg**"
      - ".tx"
      - ".git*"
    branches:
      - master
  pull_request:
    paths-ignore:
      - "*.md"
      - .circleci/
      - docs/
      - run_route_scripts/
      - test_requests/
      - "**vcpkg**"
      - ".tx"
      - ".git*"
    branches:
      - master
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
        required: false
        default: false
        
# Cancel CI runs on a branch when new commits were pushed
# See https://stackoverflow.com/a/72408109/2582935
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # only run tmate if manually invoked and debug_enabled == true or a previous step failed
  SETUP_TMATE: ${{ ((github.event_name == 'workflow_dispatch') && (github.event.inputs.debug_enabled == 'true')) && (github.repository_owner == 'valhalla') }}
  # on PRs head_ref is defined, on pushes it's ref_name
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 

jobs:
  lint_format:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Formatter & Linter
        run: |
          sudo apt-get update --assume-yes
          env DEBIAN_FRONTEND=noninteractive sudo apt-get install --yes --quiet sudo python3-pip python3-requests git curl file
          ./scripts/format.sh && ./scripts/error_on_dirty.sh

  debug_build:
    name: Debug build
    runs-on: ubuntu-latest
    needs: [lint_format]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Install deps
        run: ./scripts/install-linux-deps.sh

      - name: Get timestamp
        run: echo 'TIMESTAMP="$(date +"%s")"' >> GITHUB_ENV

      - name: Restore cache
        id: cache-ccache-restore
        uses: actions/cache/restore@v4
        with:
          path: /project/.cache/ccache
          key: ccache-debug-linux-x86_64-{{ env.BRANCH_NAME }}
          restore-keys: |
            ccache-debug-linux-x86_64-master
            ccache-debug-linux-x86_64-${{ env.TIMESTAMP }}
      
      - name: Build Valhalla
        run: |
          # NOTE: -Werror disabled in CI, as we currently have >4k warnings.
          cmake -B build -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=On -DCPACK_GENERATOR=DEB \
            -DENABLE_COMPILER_WARNINGS=On -DENABLE_WERROR=Off -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
            -DCMAKE_CXX_FLAGS="-fuse-ld=lld" -DLOGGING_LEVEL=INFO -DENABLE_PYTHON_BINDINGS=On -DENABLE_GDAL=On
          make -C build -j$(nproc)
          make -C build utrecht_tiles
          make -C build -j8 tests
      
      - name: Save cache
        uses: actions/cache/save@v4
        with:
          path: /project/.cache/ccache
          key: ccache-debug-linux-x86_64-{{ env.BRANCH_NAME }}-${{ env.TIMESTAMP }}
      
      - name: Run clang-tidy
        run: scripts/clang-tidy-only-diff.sh $(nproc)
      
      - name: Install Valhalla
        run: sudo make -C build install

      # - name: Publish Codecov
      #   run: .github/workflows/vendored-codecov.sh
      
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ env.SETUP_TMATE == 'true' || failure() }}
        with:
          detached: true
