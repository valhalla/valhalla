// Copyright 2013-2023 TomTom International BV. All rights reserved.

syntax = "proto2";

package trafficFlow;

// The traffic flow group is the top level message. It provides meta data
// covering general information about the flow data and the flow data itself.
message TrafficFlowGroup {
	// The shared meta information.
	optional MetaInformation metaInformation = 1;

	// The list of traffic flow elements.
	repeated TrafficFlow trafficFlow = 2;

	// The list of traffic flow elements which can also provide predictive flow data.
	repeated TrafficFlowWithPrediction trafficFlowWithPrediction = 3;

	// The list of traffic flow elements with a higher spatial resolution for speeds
	// and predictive flow data.
	repeated TrafficFlowWithPredictionPerSection trafficFlowWithPredictionPerSection = 4;
}


// The meta information message provides data shared by all
// traffic flow messages.
message MetaInformation {
	// Creation time (UTC) of the traffic flow group in seconds since
	// 00:00:00 UTC on 1 January 1970.
	optional uint32 createTimeUTCSeconds = 1;

	// The supplier and client information.
	optional SupplierAndClientInfo supplierAndClientInfo = 2;

	// The format version. Can be used for debugging in order to compare
	// the version of the protocol buffer on client and supplier side.
	optional int32 formatVersion = 3;

	// map name consisting of map region and version
	repeated string mapVersion = 4;
}


// The supplier and client information message is used to identify the client
// and the supplier.
message SupplierAndClientInfo {
	// Identifies the client.
	optional string clientID = 1;

	// Identifies the supplier.
	optional string supplierID = 2;
}


// The traffic flow message assigns speed information to a location.
message TrafficFlow {
	// The location information.
	optional Location location = 1;

	// The speed information.
	repeated Speed speed = 2;

	// Flag indicating road closures.
	optional bool roadClosure = 3 [default = false];

	// List of speed parameters per section. The sections are ordered by start offset.
	repeated SectionSpeed sectionSpeed = 4;
}


// A traffic flow message type dedicated for flow prediction.
message TrafficFlowWithPrediction {
	// The location information.
	optional Location location = 1;

	// The speed information.
	repeated SpeedWithTimeStamp speed = 2;

	// Flag indicating road closures.
	optional bool roadClosure = 3 [default = false];

	// Expected time in minutes it takes until the current speed equals the usual speed.
	optional uint32 timeToUsualInMinutes = 4;
}


// A traffic flow message type dedicated for prediction with higher speed resolution.
// The location is split into sections and speed information is assigned per section.
message TrafficFlowWithPredictionPerSection {
	// The location information.
	optional Location location = 1;

	// The speeds matrix, each speed vector provides speed parameters per section for a certain time
	// stamp in the future.
	repeated SpeedVector speedVector = 2;

	// Expected time in minutes it takes until the current speed equals the usual speed.
	optional uint32 timeToUsualInMinutes = 3;
}


// The location message provides all kind of supported location referencing
// methods.
message Location {
	// The TMC location reference.
	// It is composed of the following parts: CVVDLLLLL[xE[E]]
	//        C - hexadecimal country code as described in IEC 62106
	//       VV - TMC location table number
	//        D - TMC direction of the chain (direction of travel and NOT the
	//             direction of queue growth as in RDS-TMC!). Possible values:
	//             'P': positive direction, internal links only
	//             '+': positive direction, external links only
	//             'p': positive direction, internal + external links
	//             'N': negative direction, internal links only
	//             '-': negative direction, external links only
	//             'n': negative direction, internal + external links
	//    LLLLL - TMC point location code.  If the number is not 5 digits
	//             long, zeros will be added up to 5 characters at the
	//             beginning of the code.
	//  [xE[E]] - Either empty, when extent = 1, or fixed letter 'x' followed
	//             by the extent (1 or 2 digits).
	optional string tmc = 1;

	// The binary OpenLR location reference.
	optional bytes openlr = 2;

	// Length of location in meters.
	optional uint32 lengthInMeters = 3;

	// Referencing method based on map segment ids
	repeated SegmentIds segmentIds = 4;
}


// The speed message subsumes all speed and travel time related information.
message Speed {
	// The average speed along a location in kilometers per hour.
	optional int32 averageSpeedKmph = 1;

	// The time to pass a location in seconds.
	optional int32 travelTimeSeconds = 2;

	// The confidences value rates the reliability of this speed estimate.
	// The quality, amount and age of live data for the affected location
	// contribute to this score. It scales from 0 (no confidence) to 100
	// (fully confident about the estimate).
	optional int32 confidence = 3;

	// The ratio of current speed to the free flow speed on a scale from 0
	// (stationary traffic) to 1 (free flow traffic). The precision is three
	// decimal places.
	optional float relativeSpeed = 4;

	// Traffic condition on the affected location.
	optional TrafficCondition trafficCondition = 5;

	// The average speed along a location in international miles per hour.
	optional int32 averageSpeedMph = 6;

	// Defines conditions when to apply this speed information.
	optional SpeedCondition speedCondition = 7;

	reserved 8;
}


// The enum TrafficCondition indicates the traffic status on the affected location.
enum TrafficCondition {
	LONG_QUEUES_TRAFFIC = 1;
	FREE_TRAFFIC = 2;
	HEAVY_TRAFFIC = 3;
	SLOW_TRAFFIC = 4;
	QUEUING_TRAFFIC = 5;
	STATIONARY_TRAFFIC = 6;
	CLOSED = 7;
	UNKNOWN = 8;
}


// Combines a Speed message with a time stamp in the future this speed is relevant for.
message SpeedWithTimeStamp {
	// The minutes in future relative to the creation time of the complete flow data
	// the specified speed information is relevant. A value of 0 shall indicate the current
	// speed data.
	optional uint32 minutesInFuture = 1;

	// The speed information at the specified time.
	repeated Speed speed = 2;
}


// Combines a SectionSpeeds message with a time stamp in the future these speeds are relevant for.
message SpeedVector {
	// The minutes in future relative to the creation time of the complete flow data
	// the specified speed information is relevant. A value of 0 shall indicate the current
	// speed data.
	optional uint32 minutesInFuture = 1;

	// List of speed parameters per section. The sections are ordered by start offset.
	repeated SectionSpeed sectionSpeed = 2;
}


// Combines a Speed message with an offset value. The speed is only relevant for the location part
// starting at the specified offset and ending at the start offset of the succeeding section or the
// end of the location in case of the last section.
message SectionSpeed {
	// Start offset of the section in meters. This offset value is relative to the start of the
	// location (or in TMC terms: the secondary location).
	optional uint32 startOffsetInMeters = 1;

	// Speed information for the section.
	optional Speed speed = 2;

	// Flag indicating road closures.
	optional bool roadClosure = 3 [default = false];

	reserved 4;
}


// Defines conditions on speeds.
message SpeedCondition {
	// Identifies all lanes this speed is relevant for by type.
	optional LaneType laneType = 1;
}


// Identifies specific lanes on a road segment by type.
enum LaneType {
	// Lane may only be used by high occupancy vehicles.
	HIGH_OCCUPANCY = 0;
}

message SegmentIds {
	// segment referencing type
	optional SegmentReferenceType type = 1;

	// list of segment ids
	repeated SegmentId segmentId = 2;
}

enum SegmentReferenceType {
	REFERENCE_UNSPECIFIED = 0;
	OSM_WAY_ID = 1;
}

message SegmentId {
	optional int64 id = 1;
	optional bool backwards = 2;
	optional int32 startOffsetInMeters = 3;
	optional int32 endOffsetInMeters = 4;
}