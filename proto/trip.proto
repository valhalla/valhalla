syntax = "proto3";
option optimize_for = LITE_RUNTIME;
package valhalla;
import public "common.proto";
import public "sign.proto";
import "incidents.proto";

message TripLeg {

  enum Traversability {
    kNone = 0;
    kForward = 1;
    kBackward = 2;
    kBoth = 3;
  }

  enum Use {
    kRoadUse = 0;
    kRampUse = 1;              // Link - exits/entrance ramps.
    kTurnChannelUse = 2;       // Link - turn lane.
    kTrackUse = 3;             // Agricultural use; forest tracks
    kDrivewayUse = 4;          // Driveway/private service
    kAlleyUse = 5;             // Service road - limited route use
    kParkingAisleUse = 6;      // Access roads in parking areas
    kEmergencyAccessUse = 7;   // Emergency vehicles only
    kDriveThruUse = 8;         // Commercial drive-thru (banks/fast-food)
    kCuldesacUse = 9;          // Cul-de-sac (edge that forms a loop and is only
                               // connected at one node to another edge.
    kLivingStreetUse = 10;     // Shared space for cars, bikes, pedestrians
    kServiceRoadUse = 11;      // Generic service road (not driveway, alley, parking aisle, etc.)

    // Bicycle specific uses
    kCyclewayUse = 20;          // Dedicated bicycle path
    kMountainBikeUse = 21;      // Mountain bike trail

    kSidewalkUse = 24;

    // Pedestrian specific uses
    kFootwayUse = 25;
    kStepsUse = 26;             // Stairs
    kPathUse = 27;
    kPedestrianUse = 28;
    kBridlewayUse = 29;
    kPedestrianCrossingUse = 32;
    kElevatorUse = 33;
    kEscalatorUse = 34;

    //Rest/Service Areas
    kRestAreaUse = 30;
    kServiceAreaUse = 31;

    // Other...
    kOtherUse = 40;

    // Ferry and rail ferry
    kFerryUse = 41;
    kRailFerryUse = 42;

    kConstructionUse = 43;       // Road under construction

    // Transit specific uses. Must be last in the list
    kRailUse = 50;               // Rail line
    kBusUse = 51;                // Bus line
    kEgressConnectionUse = 52;   // Connection between transit station and transit egress
    kPlatformConnectionUse = 53; // Connection between transit station and transit platform
    kTransitConnectionUse = 54;  // Connection between road network and transit egress

  }

  enum Surface {
    kPavedSmooth = 0;
    kPaved = 1;
    kPavedRough = 2;
    kCompacted = 3;
    kDirt = 4;
    kGravel = 5;
    kPath = 6;
    kImpassable = 7;
  }

  enum CycleLane {
    kNoCycleLane = 0;
    kShared = 1;    // Shared use lane (could be shared with pedestrians)
    kDedicated = 2; // Dedicated cycle lane
    kSeparated = 3; // A separate cycle lane (physical separation from the main carriageway
  }

  enum SacScale {
    kNoSacScale = 0;
    kHiking = 1;
    kMountainHiking = 2;
    kDemandingMountainHiking = 3;
    kAlpineHiking = 4;
    kDemandingAlpineHiking = 5;
    kDifficultAlpineHiking = 6;
  }

  enum Sidewalk {
    kNoSidewalk = 0;
    kLeft = 1;
    kRight = 2;
    kBothSides = 3;
  }

  message LaneConnectivity {
    oneof has_from_way_id {
      uint64 from_way_id = 1;
    }
    oneof has_from_lanes {
      string from_lanes = 2;
    }
    oneof has_to_lanes {
      string to_lanes = 3;
    }
  }

  message TrafficSegment {
    oneof has_segment_id {
      uint64 segment_id = 1;
    }
    oneof has_begin_percent {
      float  begin_percent = 2;
    }
    oneof has_end_percent {
      float  end_percent = 3;
    }
    oneof has_starts_segment {
      bool   starts_segment = 4;
    }
    oneof has_ends_segment {
      bool   ends_segment = 5;
    }
  }

  message Restriction{
    oneof has_type {
      uint32 type = 1;
    }
  }

  message Edge {
    repeated StreetName name = 1;           // street names
    oneof has_length_km {
      float length_km = 2;           // km
    }
    oneof has_speed {
      float speed = 3;               // km/h
    }
    oneof has_road_class {
      RoadClass road_class = 4;
    }
    oneof has_begin_heading {
      uint32 begin_heading = 5;      // 0-359
    }
    oneof has_end_heading {
      uint32 end_heading = 6;        // 0-359
    }
    oneof has_begin_shape_index {
      uint32 begin_shape_index = 7;  // inclusive
    }
    oneof has_end_shape_index {
      uint32 end_shape_index = 8;    // inclusive
    }
    oneof has_traversability {
      Traversability traversability = 9;
    }
    oneof has_use {
      Use use = 10;
    }
    oneof has_toll {
      bool toll = 11;
    }
    oneof has_unpaved {
      bool unpaved = 12;
    }
    oneof has_tunnel {
      bool tunnel = 13;
    }
    oneof has_bridge {
      bool bridge = 14;
    }
    oneof has_roundabout {
      bool roundabout = 15;
    }
    oneof has_internal_intersection {
      bool internal_intersection = 16;
    }
    oneof has_drive_on_left {
      bool drive_on_left = 17;      // [default = false]
    }
    oneof has_surface {
      Surface surface = 18;
    }
    TripSign sign = 19;
    oneof has_travel_mode {
      TravelMode travel_mode = 20;
    }
    oneof has_vehicle_type {
      VehicleType vehicle_type = 21;
    }
    oneof has_pedestrian_type {
      PedestrianType pedestrian_type = 22;
    }
    oneof has_bicycle_type {
      BicycleType bicycle_type = 23;
    }
    oneof has_transit_type {
      TransitType transit_type = 24;
    }
    TransitRouteInfo transit_route_info = 25;
    oneof has_id {
      uint64 id = 26;
    }
    oneof has_way_id {
      uint64 way_id = 27;
    }
    oneof has_weighted_grade {
      float weighted_grade = 28;
    }
    oneof has_max_upward_grade {
      int32 max_upward_grade = 29;
    }
    oneof has_max_downward_grade {
      int32 max_downward_grade = 30;
    }
    oneof has_lane_count {
      uint32 lane_count = 31;
    }
    oneof has_cycle_lane {
      CycleLane cycle_lane = 32;
    }
    oneof has_bicycle_network {
      uint32 bicycle_network = 33;
    }
    oneof has_sidewalk {
      Sidewalk sidewalk = 34;
    }
    oneof has_density {
      uint32 density = 35;
    }
    oneof has_speed_limit {
      uint32 speed_limit = 36;
    }
    oneof has_truck_speed {
      float truck_speed = 37;         // km/h
    }
    oneof has_truck_route {
      bool truck_route = 38;
    }
    repeated LaneConnectivity lane_connectivity = 39;
    oneof has_mean_elevation {
      int32 mean_elevation = 40;
    }
    repeated TrafficSegment traffic_segment = 41;
    repeated TurnLane turn_lanes = 42;
    oneof has_has_time_restrictions {
      bool has_time_restrictions = 43;
    }
    oneof has_default_speed {
      float default_speed = 44;       // km/h
    }
    Restriction restriction = 45;
    oneof has_destination_only {
      bool destination_only = 46;
    }
    oneof has_is_urban {
      bool is_urban = 47; // uses edge density to decide if edge is in an urban area
    }
    repeated TaggedValue tagged_value = 48;

    // for the part of the edge that is used in the path we must know where
    // it starts and ends along the length of the edge as a percentage
    oneof has_source_along_edge {
      float source_along_edge = 49;
    }
    oneof has_target_along_edge {
      float target_along_edge = 50;
    }
    oneof has_sac_scale {
      SacScale sac_scale = 51;
    }
    oneof has_shoulder {
      bool shoulder = 52;
    }
    oneof has_indoor {
      bool indoor = 53;
    }
  }

  message IntersectingEdge {
    oneof has_begin_heading {
      uint32 begin_heading = 1;       // 0-359
    }
    oneof has_prev_name_consistency {
      bool prev_name_consistency = 2;
    }
    oneof has_curr_name_consistency {
      bool curr_name_consistency = 3;
    }
    oneof has_driveability {
      Traversability driveability = 4;
    }
    oneof has_cyclability {
      Traversability cyclability = 5;
    }
    oneof has_walkability {
      Traversability walkability = 6;
    }
    oneof has_use {
      Use use = 7;
    }
    oneof has_road_class {
      RoadClass road_class = 8;
    }
    oneof has_lane_count {
      uint32 lane_count = 9;
    }
    TripSign sign = 10;
  }

  message Cost {
    oneof has_seconds {
      double seconds = 1;
    }
    oneof has_cost {
      double cost = 2;
    }
  }

  message PathCost {
    Cost elapsed_cost = 1;
    Cost transition_cost = 2;
  }

  message Node {
    enum Type {
      kStreetIntersection = 0;      // Regular intersection of 2 roads
      kGate = 1;                    // Gate or rising bollard
      kBollard = 2;                 // Bollard (fixed obstruction)
      kTollBooth = 3;               // Toll booth / fare collection
      // TODO - for now there is no differentiation between bus and rail stops...
      kTransitEgress = 4;           // Transit egress
      kTransitStation = 5;          // Transit station
      kTransitPlatform = 6;         // Transit platform (rail and bus)
      kBikeShare = 7;               // Bike share location
      kParking = 8;                 // Parking location
      kMotorwayJunction = 9;        // Highway = motorway_junction
      kBorderControl = 10;          // Border control
      kTollGantry = 11;             // Toll gantry
      kSumpBuster = 12;             // Sump Buster
      kBuildingEntrance = 13;       // Building Entrance
      kElevator = 14;               // Elevator
    }
    Edge edge = 1;
    repeated IntersectingEdge intersecting_edge = 2;
    oneof has_admin_index {
      uint32 admin_index = 3;         // index into the admin list
    }
    oneof has_type {
      Type type = 4;                  // The type of node
    }
    oneof has_fork {
      bool fork = 5;                  // Fork
    }
    TransitPlatformInfo transit_platform_info = 6;
    TransitStationInfo transit_station_info = 7;
    TransitEgressInfo transit_egress_info = 10;
    oneof has_time_zone {
      string time_zone = 11;
    }
    PathCost cost = 12;             // how much cost did it take at this node in the path
    repeated PathCost recosts = 13;          // how much cost did it take at this node in the path for recostings
    BikeShareStationInfo bss_info = 14;
 }

  message Admin {
    oneof has_country_code {
      string country_code = 1;
    }
    oneof has_country_text {
      string country_text = 2;
    }
    oneof has_state_code {
      string state_code = 3;
    }
    oneof has_state_text {
      string state_text = 4;
    }
  }

  message ShapeAttributes {
    repeated uint32 time = 1 [packed=true]; // milliseconds
    repeated uint32 length = 2 [packed=true]; // decimeters
    repeated uint32 speed = 3 [packed=true]; // decimeters per sec
    // 4 is reserved
    repeated uint32 speed_limit = 5 [packed=true]; // speed limit in kph
  }

  // we encapsulate the real incident object here so we can add information
  // about where it is along the route, ie once its referenced to the route
  message Incident {
    valhalla.IncidentsTile.Metadata metadata = 1;
    // Valhalla additions to incident metadata goes here
    oneof has_begin_shape_index {
      uint32 begin_shape_index = 3;
    }
    oneof has_end_shape_index {
      uint32 end_shape_index = 4;
    }
  };

  message Closure {
    oneof has_begin_shape_index {
      uint32 begin_shape_index = 1;
    }
    oneof has_end_shape_index {
      uint32 end_shape_index = 2;
    }
  };

  oneof has_osm_changeset {
    uint64 osm_changeset = 1;
  }
  oneof has_trip_id {
    uint64 trip_id = 2;
  }
  oneof has_leg_id {
    uint32 leg_id = 3;
  }
  oneof has_leg_count {
    uint32 leg_count = 4;
  }
  repeated Location location = 5;
  repeated Node node = 6;
  repeated Admin admin = 7;
  oneof has_shape {
    string shape = 8;
  }
  BoundingBox bbox = 9;
  ShapeAttributes shape_attributes = 10;
  repeated Incident incidents = 11;
  repeated string algorithms = 12;
  repeated Closure closures = 13;
}

message TripRoute {
  repeated TripLeg legs = 1;
}

message Trip {
  repeated TripRoute routes = 1;
}
