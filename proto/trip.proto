syntax = "proto2";
option optimize_for = LITE_RUNTIME;
package valhalla;
import public "tripcommon.proto";

message TripLeg {

  message SignElement {
    optional string text = 1;               // The actual sign element text, examples: I 95 North or Derry Street
    optional bool is_route_number = 2;      // true if sign element is a reference route number such as: I 81 South or US 322 West
  }

  message Sign {
    repeated SignElement exit_numbers = 1;            // The list of exit numbers, example: 67B
    repeated SignElement exit_onto_streets = 2;       // The list of exit branch street names, examples: I 95 North or Baltimore-Washington Parkway
    repeated SignElement exit_toward_locations = 3;   // The list of exit toward locations, examples: New York or I 395 South
    repeated SignElement exit_names = 4;              // The list of exit names - not used much in US, example: Gettysburg Pike
    repeated SignElement guide_onto_streets = 5;      // The list of guide branch street names, examples: US 22 West or Baltimore-Washington Parkway
    repeated SignElement guide_toward_locations = 6;  // The list of guide toward locations, examples: Lewistown or US 15
    repeated SignElement junction_names = 7;          // The list of junction names, examples: 万年橋東 or Mannenbashi East
    repeated SignElement guidance_view_junctions = 8; // The list of guidance view junctions, examples: AB12345;1 or AB12345;E
  }

  enum Traversability {
    kNone = 0;
    kForward = 1;
    kBackward = 2;
    kBoth = 3;
  }

  enum RoadClass {
    kMotorway = 0;
    kTrunk = 1;
    kPrimary = 2;
    kSecondary = 3;
    kTertiary = 4;
    kUnclassified = 5;
    kResidential = 6;
    kServiceOther = 7;
  }

  enum Use {
    kRoadUse = 0;
    kRampUse = 1;              // Link - exits/entrance ramps.
    kTurnChannelUse = 2;       // Link - turn lane.
    kTrackUse = 3;             // Agricultural use; forest tracks
    kDrivewayUse = 4;          // Driveway/private service
    kAlleyUse = 5;             // Service road - limited route use
    kParkingAisleUse = 6;      // Access roads in parking areas
    kEmergencyAccessUse = 7;   // Emergency vehicles only
    kDriveThruUse = 8;         // Commercial drive-thru (banks/fast-food)
    kCuldesacUse = 9;          // Cul-de-sac (edge that forms a loop and is only
                               // connected at one node to another edge.

    // Bicycle specific uses
    kCyclewayUse = 20;          // Dedicated bicycle path
    kMountainBikeUse = 21;      // Mountain bike trail

    kSidewalkUse = 24;

    // Pedestrian specific uses
    kFootwayUse = 25;
    kStepsUse = 26;             // Stairs
    kPathUse = 27;
    kPedestrianUse = 28;
    kBridlewayUse = 29;

    // Other...
    kOtherUse = 40;

    // Ferry and rail ferry
    kFerryUse = 41;
    kRailFerryUse = 42;

    // Transit specific uses. Must be last in the list
    kRailUse = 50;               // Rail line
    kBusUse = 51;                // Bus line
    kEgressConnectionUse = 52;   // Connection between transit station and transit egress
    kPlatformConnectionUse = 53; // Connection between transit station and transit platform
    kTransitConnectionUse = 54;  // Connection between road network and transit egress
  }

  enum Surface {
    kPavedSmooth = 0;
    kPaved = 1;
    kPavedRough = 2;
    kCompacted = 3;
    kDirt = 4;
    kGravel = 5;
    kPath = 6;
    kImpassable = 7;
  }

  enum TravelMode {
    kDrive = 0;
    kPedestrian = 1;
    kBicycle = 2;
    kTransit = 3;
  }

  // TODO: review and update as needed
  enum VehicleType {
    kCar = 0;
    kMotorcycle = 1;
    kAutoBus = 2;
    kTractorTrailer = 3;
    kMotorScooter = 4;
  }

  // TODO: review and update as needed
  enum PedestrianType {
    kFoot = 0;
    kWheelchair = 1;
    kSegway = 2;
  }

  enum BicycleType {
    kRoad = 0;
    kCross = 1;
    kHybrid = 2;
    kMountain = 3;
  }

  enum TransitType {
    kTram = 0;
    kMetro = 1;
    kRail = 2;
    kBus = 3;
    kFerry = 4;
    kCableCar = 5;
    kGondola = 6;
    kFunicular = 7;
  }

  message TransitRouteInfo {
    optional string onestop_id = 1;
    optional uint32 block_id = 2;
    optional uint32 trip_id = 3;
    optional string short_name = 4;
    optional string long_name = 5;
    optional string headsign = 6;
    optional uint32 color = 7;
    optional uint32 text_color = 8;
    optional string description = 9;
    optional string operator_onestop_id = 10;
    optional string operator_name = 11;
    optional string operator_url = 12;
  }

  enum CycleLane {
    kNoCycleLane = 0;
    kShared = 1;    // Shared use lane (could be shared with pedestrians)
    kDedicated = 2; // Dedicated cycle lane
    kSeparated = 3; // A separate cycle lane (physical separation from the main carriageway
  }

  enum Sidewalk {
    kNoSidewalk = 0;
    kLeft = 1;
    kRight = 2;
    kBothSides = 3;
  }

  message LaneConnectivity {
    optional uint64 from_way_id = 1;
    optional string from_lanes = 2;
    optional string to_lanes = 3;
  }

  message TrafficSegment {
    optional uint64 segment_id = 1;
    optional float  begin_percent = 2;
    optional float  end_percent = 3;
    optional bool   starts_segment = 4;
    optional bool   ends_segment = 5;
  }

  message Edge {
    repeated StreetName name = 1;           // street names
    optional float length = 2;              // km
    optional float speed = 3;               // km/h
    optional RoadClass road_class = 4;
    optional uint32 begin_heading = 5;      // 0-359
    optional uint32 end_heading = 6;        // 0-359
    optional uint32 begin_shape_index = 7;  // inclusive
    optional uint32 end_shape_index = 8;    // inclusive
    optional Traversability traversability = 9;
    optional Use use = 10;
    optional bool toll = 11;
    optional bool unpaved = 12;
    optional bool tunnel = 13;
    optional bool bridge = 14;
    optional bool roundabout = 15;
    optional bool internal_intersection = 16;
    optional bool drive_on_right = 17 [default = true];
    optional Surface surface = 18;
    optional Sign sign = 19;
    optional TravelMode travel_mode = 20;
    optional VehicleType vehicle_type = 21;
    optional PedestrianType pedestrian_type = 22;
    optional BicycleType bicycle_type = 23;
    optional TransitType transit_type = 24;
    optional TransitRouteInfo transit_route_info = 25;
    optional uint64 id = 26;
    optional uint64 way_id = 27;
    optional float weighted_grade = 28;
    optional int32 max_upward_grade = 29;
    optional int32 max_downward_grade = 30;
    optional uint32 lane_count = 31;
    optional CycleLane cycle_lane = 32;
    optional uint32 bicycle_network = 33;
    optional Sidewalk sidewalk = 34;
    optional uint32 density = 35;
    optional uint32 speed_limit = 36;
    optional float truck_speed = 37;         // km/h
    optional bool truck_route = 38;
    repeated LaneConnectivity lane_connectivity = 39;
    optional int32 mean_elevation = 40;
    repeated TrafficSegment traffic_segment = 41;
    repeated TurnLane turn_lanes = 42;
    optional bool has_time_restrictions = 43;
  }

  message IntersectingEdge {
    optional uint32 begin_heading = 1;       // 0-359
    optional bool prev_name_consistency = 2;
    optional bool curr_name_consistency = 3;
    optional Traversability driveability = 4;
    optional Traversability cyclability = 5;
    optional Traversability walkability = 6;
    optional Use use = 7;
    optional RoadClass road_class = 8;
  }

  message Node {
    enum Type {
      kStreetIntersection = 0;      // Regular intersection of 2 roads
      kGate = 1;                    // Gate or rising bollard
      kBollard = 2;                 // Bollard (fixed obstruction)
      kTollBooth = 3;               // Toll booth / fare collection
      // TODO - for now there is no differentiation between bus and rail stops...
      kTransitEgress = 4;           // Transit egress
      kTransitStation = 5;          // Transit station
      kTransitPlatform = 6;         // Transit platform (rail and bus)
      kBikeShare = 7;               // Bike share location
      kParking = 8;                 // Parking location
      kMotorwayJunction = 9;        // Highway = motorway_junction
      kBorderControl = 10;          // Border control
    }

    optional Edge edge = 1;
    repeated IntersectingEdge intersecting_edge = 2;
    optional double elapsed_time = 3;        // seconds from start of leg
    optional uint32 admin_index = 4;         // index into the admin list
    optional Type type = 5;                  // The type of node
    optional bool fork = 6;                  // Fork
    optional TransitPlatformInfo transit_platform_info = 7;
    optional TransitStationInfo transit_station_info = 8;
    optional TransitEgressInfo transit_egress_info = 9;
    optional string time_zone = 10;
    optional double transition_time = 11;    // seconds spent transitioning through this node
  }

  message Admin {
    optional string country_code = 1;
    optional string country_text = 2;
    optional string state_code = 3;
    optional string state_text = 4;
  }

  message ShapeAttributes {
    repeated uint32 time = 1 [packed=true]; // milliseconds
    repeated uint32 length = 2 [packed=true]; // decimeters
    repeated uint32 speed = 3 [packed=true]; // decimeters per sec
  }

  optional uint64 osm_changeset = 1;
  optional uint64 trip_id = 2;
  optional uint32 leg_id = 3;
  optional uint32 leg_count = 4;
  repeated Location location = 5;
  repeated Node node = 6;
  repeated Admin admin = 7;
  optional string shape = 8;
  optional BoundingBox bbox = 9;
  optional ShapeAttributes shape_attributes = 10;
}

message TripRoute {
  repeated TripLeg legs = 1;
}

message Trip {
  repeated TripRoute routes = 1;
}
