syntax = "proto2";
option optimize_for = LITE_RUNTIME;
package valhalla.odin;
import public "tripcommon.proto";

message TripDirections {

  message Summary {
    optional float length = 1;          // kilometers or miles based on units
    optional uint32 time = 2;           // seconds
    optional BoundingBox bbox = 3;      // Bounding box of the shape
  }

  message TransitInfo {
    optional string onestop_id = 1;
    optional string short_name = 2;
    optional string long_name = 3;
    optional string headsign = 4;
    optional uint32 color = 5;
    optional uint32 text_color = 6;
    optional string description = 7;
    optional string operator_onestop_id = 8;
    optional string operator_name = 9;
    optional string operator_url = 10;
    repeated TransitPlatformInfo transit_stops = 11;
  }

  enum TravelMode {
    kDrive = 0;
    kPedestrian = 1;
    kBicycle = 2;
    kTransit = 3;
  }

  // TODO: review and update as needed
  enum VehicleType {
    kCar = 0;
    kMotorcycle = 1;
    kAutoBus = 2;
    kTractorTrailer = 3;
    kMotorScooter = 4;
  }

  // TODO: review and update as needed
  enum PedestrianType {
    kFoot = 0;
    kWheelchair = 1;
    kSegway = 2;
  }

  enum BicycleType {
    kRoad = 0;
    kCross = 1;
    kHybrid = 2;
    kMountain = 3;
  }

  enum TransitType {
    kTram = 0;
    kMetro = 1;
    kRail = 2;
    kBus = 3;
    kFerry = 4;
    kCableCar = 5;
    kGondola = 6;
    kFunicular = 7;
  }

  message Maneuver {
    enum CardinalDirection {
      kNorth = 0;
      kNorthEast = 1;
      kEast = 2;
      kSouthEast = 3;
      kSouth = 4;
      kSouthWest = 5;
      kWest = 6;
      kNorthWest = 7;
    }
  
    // TODO - add others later
    enum Type {
      kNone = 0;
      kStart = 1;
      kStartRight = 2;
      kStartLeft = 3;
      kDestination = 4;
      kDestinationRight = 5;
      kDestinationLeft = 6;
      kBecomes = 7;
      kContinue = 8;
      kSlightRight = 9;
      kRight = 10;
      kSharpRight = 11;
      kUturnRight = 12;
      kUturnLeft = 13;
      kSharpLeft = 14;
      kLeft = 15;
      kSlightLeft = 16;
      kRampStraight = 17;
      kRampRight = 18;
      kRampLeft = 19;
      kExitRight = 20;
      kExitLeft = 21;
      kStayStraight = 22;
      kStayRight = 23;
      kStayLeft = 24;
      kMerge = 25;
      kRoundaboutEnter = 26;
      kRoundaboutExit = 27;
      kFerryEnter = 28;
      kFerryExit = 29;
      kTransit = 30;
      kTransitTransfer = 31;
      kTransitRemainOn = 32;
      kTransitConnectionStart = 33;
      kTransitConnectionTransfer = 34;
      kTransitConnectionDestination = 35;
      kPostTransitConnectionDestination = 36;
    }
  
    message SignElement {
      optional string text = 1;               // The actual sign element text, examples: I 95 North or Derry Street
      optional bool is_route_number = 2;      // true if sign element is a reference route number such as: I 81 South or US 322 West
      optional uint32 consecutive_count = 3;  // The frequency of this sign element within a set a consecutive signs
    }

    message Sign {
      repeated SignElement exit_numbers = 1;          // The list of exit numbers, example: 67B
      repeated SignElement exit_onto_streets = 2;     // The list of exit branch street names, example: I 95 North
      repeated SignElement exit_toward_locations = 3; // The list of exit toward locations, examples: New York or I 395 South
      repeated SignElement exit_names = 4;            // The list of exit names - not used much in US, example: Gettysburg Pike
    }

    optional Type type = 1;                                  // Maneuver type
    optional string text_instruction = 2;                    // text instruction
    repeated StreetName street_name = 3;                     // street names
    optional float length = 4;                               // kilometers or miles based on units
    optional uint32 time = 5;                                // seconds
    optional CardinalDirection begin_cardinal_direction = 6; // CardinalDirection
    optional uint32 begin_heading = 7;                       // 0-360 
    optional uint32 begin_shape_index = 8;                   // inclusive index
    optional uint32 end_shape_index = 9;                     // inclusive index
    optional bool portions_toll = 10;                        // has portions toll
    optional bool portions_unpaved = 11;                     // has portions unpaved
    optional string verbal_transition_alert_instruction = 12;// verbal transition alert instruction
    optional string verbal_pre_transition_instruction = 13;  // verbal pre-transition instruction
    optional string verbal_post_transition_instruction = 14; // verbal post-transition instruction
    repeated StreetName begin_street_name = 15;              // begin street names
    optional Sign sign = 16;                                 // associated sign information, for example: exit number
    optional uint32 roundabout_exit_count = 17;              // which spoke to exit roundabout after entering
    optional string depart_instruction = 18;                 // depart instruction - used with transit
    optional string verbal_depart_instruction = 19;          // verbal depart instruction - used with transit
    optional string arrive_instruction = 20;                 // arrive instruction - used with transit
    optional string verbal_arrive_instruction = 21;          // verbal arrive instruction - used with transit
    optional TransitInfo transit_info = 22;                  // transit attributes including a list of transit stops
    optional bool verbal_multi_cue = 23;                     // verbal multi-cue flag
    optional TravelMode travel_mode = 24;                    // travel mode
    optional VehicleType vehicle_type = 25;
    optional PedestrianType pedestrian_type = 26;
    optional BicycleType bicycle_type = 27;
    optional TransitType transit_type = 28;
    optional uint32 begin_path_index = 29;                   // Index in TripPath for first node of maneuver
    optional uint32 end_path_index = 30;                     // Index in TripPath for last node of maneuver
    optional bool to_stay_on = 31;                           // True if same name as previous maneuver
    repeated StreetName roundabout_exit_street_names = 32;   // Outbound street names from roundabout
    optional uint32 turn_degree = 33;                        // Turn degree of maneuver
  }
  
  optional uint64 trip_id = 1;
  optional uint32 leg_id = 2;
  optional uint32 leg_count = 3;
  repeated Location location = 4;
  optional Summary summary = 5;
  repeated Maneuver maneuver = 6;
  optional string shape = 7;
}

