syntax = "proto2";
option optimize_for = LITE_RUNTIME;
package valhalla;

message LatLng {
  optional double lat = 1;
  optional double lng = 2;
}

message BoundingBox {
  optional LatLng min_ll = 1;
  optional LatLng max_ll = 2;
}

message Location {
  enum Type {
    kBreak = 0;
    kThrough = 1;
    kVia = 2;
    kBreakThrough = 3;
  }

  enum SideOfStreet {
    kNone = 0;
    kLeft = 1;
    kRight = 2;
  }

  enum PreferredSide {
    either = 0;
    same = 1;
    opposite = 2;
  }

  message PathEdge {
    optional uint64 graph_id = 1;
    optional double percent_along = 2;
    optional LatLng ll = 3;
    optional SideOfStreet side_of_street = 4;
    optional double distance = 5;
    optional int32 minimum_reachability = 6; //deprecated
    optional bool begin_node = 7;
    optional bool end_node = 8;
    repeated string names = 10;
    optional int32 outbound_reach = 11;
    optional int32 inbound_reach = 12;
  }

  message SearchFilter {
    // frc
    optional RoadClass min_road_class = 1 [default = kServiceOther]; // lowest road class to allow in loki results
    optional RoadClass max_road_class = 2 [default = kMotorway]; // highest road class to allow in loki results
    // form of way
    optional bool exclude_tunnel  = 3;  // whether to exclude tunnels from loki results (default false)
    optional bool exclude_bridge  = 4;  // whether to exclude bridges from loki results (default false)
    optional bool exclude_ramp  = 5;    // whether to exclude roads with ramp use from loki results (default false)
    optional bool exclude_closures  = 6 [default = true]; // whether to exclude roads marked as closed due to traffic
  }

  //inputs
  optional LatLng ll = 1;
  optional Type type = 2 [default = kBreak];
  optional uint32 heading = 3;                                 // 0-359
  optional string name = 4;
  optional string street = 5;
  optional string city = 6;
  optional string state = 7;
  optional string postal_code = 8;
  optional string country = 9;
  optional string phone = 10;
  optional string url = 11;
  optional string date_time = 12;
  optional SideOfStreet side_of_street = 13;
  optional uint32 heading_tolerance = 14;
  optional uint32 node_snap_tolerance = 15;
  optional uint64 way_id = 16;
  optional uint32 minimum_reachability = 17;
  optional uint32 radius = 18;
  optional uint32 accuracy = 19;
  optional double time = 20 [default = -1.0];
  optional bool rank_candidates = 21 [default = true];

  //outputs
  repeated PathEdge path_edges = 22;
  repeated PathEdge filtered_edges = 23;
  optional uint32 original_index = 24;
  optional LatLng projected_ll = 25;

  //more inputs
  optional PreferredSide preferred_side = 26 [default = either];
  optional LatLng display_ll = 27;
  optional uint32 search_cutoff = 28;
  optional uint32 street_side_tolerance = 29;
  optional uint32 route_index = 30;
  optional uint32 shape_index = 31;
  optional SearchFilter search_filter = 32;
  optional uint32 street_side_max_distance = 33;
}

message TransitEgressInfo {
  optional string onestop_id = 1;        // Unique transitland ID
  optional string name = 2;              // The name of the egress
  optional LatLng ll = 3;                // Latitude, longitude of the egress
}

message TransitStationInfo {
  optional string onestop_id = 1;        // Unique transitland ID
  optional string name = 2;              // The name of the station
  optional LatLng ll = 3;                // Latitude, longitude of the station
}

message TransitPlatformInfo {
  enum Type {
    kStop = 0;
    kStation = 1;
  }

  optional Type type = 1;                  // The type of stop (station or simple stop)
  optional string onestop_id = 2;          // Unique transitland ID
  optional string name = 3;                // The name of the platform
  optional string arrival_date_time = 4;   // ISO 8601 arrival date/time YYYY-MM-DDThh:mm
  optional string departure_date_time = 5; // ISO 8601 departure date/time YYYY-MM-DDThh:mm
  optional bool assumed_schedule = 6;      // true if the times are based on an assumed schedule
  optional LatLng ll = 7;                  // Latitude, longitude of the transit stop
  optional string station_onestop_id = 8;  // Unique transitland station ID
  optional string station_name = 9;        // The station name of the platform
}

message StreetName {
  optional string value = 1;          // The actual street name value, examples: I 95 North or Derry Street
  optional bool is_route_number = 2;  // true if the street name is a reference route number such as: I 81 South or US 322 West
}

message TurnLane {
  enum State {
    kInvalid = 0;
    kValid = 1;
    kActive = 2;
  }
  optional uint32 directions_mask = 1;
  optional State state = 2 [default = kInvalid];
  optional uint32 active_direction = 3;
}

enum RoadClass {
  kMotorway = 0;
  kTrunk = 1;
  kPrimary = 2;
  kSecondary = 3;
  kTertiary = 4;
  kUnclassified = 5;
  kResidential = 6;
  kServiceOther = 7;
}

message TaggedName {
  enum Type {
    kTunnel = 1;
    kBridge = 2;
  }
  optional string value = 1;   // The actual tagged name value, examples: Ted Williams Tunnel
  optional Type type = 2;      // The type of tagged name (tunnel or bridge)
}
